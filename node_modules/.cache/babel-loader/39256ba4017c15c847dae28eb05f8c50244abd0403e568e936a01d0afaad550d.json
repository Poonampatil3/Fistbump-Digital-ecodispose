{"ast":null,"code":"import { GoogleGenerativeAI } from \"@google/generative-ai\";\nif (!process.env.REACT_APP_GEMINI_API_KEY) {\n  console.error('Missing Gemini API key! Please add REACT_APP_GEMINI_API_KEY to your .env file');\n}\nconst genAI = new GoogleGenerativeAI(process.env.REACT_APP_GEMINI_API_KEY || '');\nexport const analyzeImage = async imageData => {\n  try {\n    const model = genAI.getGenerativeModel({\n      model: \"gemini-2.5-flash\"\n    });\n\n    // Extract base64 data\n    let base64Data;\n    if (!imageData) {\n      throw new Error('No image data provided');\n    }\n    try {\n      if (imageData.startsWith('data:image/')) {\n        // Handle data URL\n        base64Data = imageData.split(',')[1];\n      } else if (imageData instanceof Blob || imageData instanceof File) {\n        // Convert Blob/File to base64\n        base64Data = await blobToBase64(imageData);\n      } else {\n        throw new Error('Invalid image format');\n      }\n      const imageRequest = {\n        contents: [{\n          parts: [{\n            text: \"Analyze this image and identify what type of waste item it is. What material is it made of? Which bin should it go in?\"\n          }, {\n            inlineData: {\n              data: base64Data,\n              mimeType: \"image/jpeg\"\n            }\n          }]\n        }]\n      };\n      const result = await model.generateContent(imageRequest);\n      const response = await result.response;\n      const text = response.text();\n\n      // Parse the response\n      const lines = text.split('\\n');\n      const data = {};\n      lines.forEach(line => {\n        if (line.includes(':')) {\n          const [key, value] = line.split(':').map(s => s.trim());\n          data[key.toLowerCase()] = value;\n        }\n      });\n      return {\n        id: Date.now().toString(),\n        name: data.name || 'Unknown Item',\n        material: data.material || 'Unknown',\n        category: data.category || 'General Waste',\n        binColor: data.bincolor || 'Black',\n        tip: data.tip || 'Please dispose of properly'\n      };\n    } catch (error) {\n      throw new Error(`Image processing failed: ${error.message}`);\n    }\n  } catch (error) {\n    console.error('Error in analyzeImage:', error);\n    throw error;\n  }\n};\n\n// Helper function to convert Blob to base64\nconst blobToBase64 = blob => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onloadend = () => {\n      const base64Data = reader.result.split(',')[1];\n      resolve(base64Data);\n    };\n    reader.onerror = reject;\n    reader.readAsDataURL(blob);\n  });\n};","map":{"version":3,"names":["GoogleGenerativeAI","process","env","REACT_APP_GEMINI_API_KEY","console","error","genAI","analyzeImage","imageData","model","getGenerativeModel","base64Data","Error","startsWith","split","Blob","File","blobToBase64","imageRequest","contents","parts","text","inlineData","data","mimeType","result","generateContent","response","lines","forEach","line","includes","key","value","map","s","trim","toLowerCase","id","Date","now","toString","name","material","category","binColor","bincolor","tip","message","blob","Promise","resolve","reject","reader","FileReader","onloadend","onerror","readAsDataURL"],"sources":["C:/Users/patil/Desktop/fistbump2-main/src/services/geminiService.js"],"sourcesContent":["import { GoogleGenerativeAI } from \"@google/generative-ai\";\r\n\r\nif (!process.env.REACT_APP_GEMINI_API_KEY) {\r\n  console.error('Missing Gemini API key! Please add REACT_APP_GEMINI_API_KEY to your .env file');\r\n}\r\n\r\nconst genAI = new GoogleGenerativeAI(process.env.REACT_APP_GEMINI_API_KEY || '');\r\n\r\n\r\nexport const analyzeImage = async (imageData) => {\r\n  try {\r\n    const model = genAI.getGenerativeModel({ model: \"gemini-2.5-flash\" });\r\n\r\n    // Extract base64 data\r\n    let base64Data;\r\n    if (!imageData) {\r\n      throw new Error('No image data provided');\r\n    }\r\n\r\n    try {\r\n      if (imageData.startsWith('data:image/')) {\r\n        // Handle data URL\r\n        base64Data = imageData.split(',')[1];\r\n      } else if (imageData instanceof Blob || imageData instanceof File) {\r\n        // Convert Blob/File to base64\r\n        base64Data = await blobToBase64(imageData);\r\n      } else {\r\n        throw new Error('Invalid image format');\r\n      }\r\n\r\n      const imageRequest = {\r\n        contents: [{\r\n          parts: [\r\n            {\r\n              text: \"Analyze this image and identify what type of waste item it is. What material is it made of? Which bin should it go in?\"\r\n            },\r\n            {\r\n              inlineData: {\r\n                data: base64Data,\r\n                mimeType: \"image/jpeg\"\r\n              }\r\n            }\r\n          ]\r\n        }]\r\n      };\r\n\r\n      const result = await model.generateContent(imageRequest);\r\n      const response = await result.response;\r\n      const text = response.text();\r\n\r\n      // Parse the response\r\n      const lines = text.split('\\n');\r\n      const data = {};\r\n      \r\n      lines.forEach(line => {\r\n        if (line.includes(':')) {\r\n          const [key, value] = line.split(':').map(s => s.trim());\r\n          data[key.toLowerCase()] = value;\r\n        }\r\n      });\r\n\r\n      return {\r\n        id: Date.now().toString(),\r\n        name: data.name || 'Unknown Item',\r\n        material: data.material || 'Unknown',\r\n        category: data.category || 'General Waste',\r\n        binColor: data.bincolor || 'Black',\r\n        tip: data.tip || 'Please dispose of properly',\r\n      };\r\n    } catch (error) {\r\n      throw new Error(`Image processing failed: ${error.message}`);\r\n    }\r\n  } catch (error) {\r\n    console.error('Error in analyzeImage:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Helper function to convert Blob to base64\r\nconst blobToBase64 = (blob) => {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.onloadend = () => {\r\n      const base64Data = reader.result.split(',')[1];\r\n      resolve(base64Data);\r\n    };\r\n    reader.onerror = reject;\r\n    reader.readAsDataURL(blob);\r\n  });\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}