{"ast":null,"code":"import { GoogleGenerativeAI } from \"@google/generative-ai\";\nif (!process.env.REACT_APP_GEMINI_API_KEY) {\n  console.error('Missing Gemini API key! Please add REACT_APP_GEMINI_API_KEY to your .env file');\n}\nconst genAI = new GoogleGenerativeAI(process.env.REACT_APP_GEMINI_API_KEY || '');\nexport const analyzeImage = async imageData => {\n  try {\n    const model = genAI.getGenerativeModel({\n      model: \"gemini-2.5-flash\"\n    });\n\n    // Handle base64 string\n    const base64Data = imageData.replace(/^data:image\\/(png|jpeg|jpg);base64,/, '');\n    const imageParts = [{\n      inlineData: {\n        data: base64Data,\n        mimeType: \"image/jpeg\"\n      }\n    }];\n    const prompt = `Analyze this image and identify what type of waste item it is. Format the response as:\n    Name: [item name]\n    Material: [material type]\n    Category: [waste category]\n    BinColor: [bin color]\n    Tip: [disposal instructions]`;\n    const result = await model.generateContent([prompt, imageParts[0]]);\n    const response = await result.response;\n    const text = response.text();\n\n    // Parse the response\n    const lines = text.split('\\n');\n    const data = {};\n    lines.forEach(line => {\n      if (line.includes(':')) {\n        const [key, value] = line.split(':').map(s => s.trim());\n        data[key.toLowerCase()] = value;\n      }\n    });\n    return {\n      id: Date.now().toString(),\n      name: data.name || 'Unknown Item',\n      material: data.material || 'Unknown',\n      category: data.category || 'General Waste',\n      binColor: data.bincolor || 'Black',\n      tip: data.tip || 'Please dispose of properly'\n    };\n  } catch (error) {\n    console.error('Error in analyzeImage:', error);\n    throw new Error(`Failed to analyze image: ${error.message}`);\n  }\n};","map":{"version":3,"names":["GoogleGenerativeAI","process","env","REACT_APP_GEMINI_API_KEY","console","error","genAI","analyzeImage","imageData","model","getGenerativeModel","base64Data","replace","imageParts","inlineData","data","mimeType","prompt","result","generateContent","response","text","lines","split","forEach","line","includes","key","value","map","s","trim","toLowerCase","id","Date","now","toString","name","material","category","binColor","bincolor","tip","Error","message"],"sources":["C:/Users/patil/Desktop/fistbump2-main/src/services/geminiService.js"],"sourcesContent":["import { GoogleGenerativeAI } from \"@google/generative-ai\";\r\n\r\nif (!process.env.REACT_APP_GEMINI_API_KEY) {\r\n  console.error('Missing Gemini API key! Please add REACT_APP_GEMINI_API_KEY to your .env file');\r\n}\r\n\r\nconst genAI = new GoogleGenerativeAI(process.env.REACT_APP_GEMINI_API_KEY || '');\r\n\r\nexport const analyzeImage = async (imageData) => {\r\n  try {\r\n    const model = genAI.getGenerativeModel({ model: \"gemini-2.5-flash\" });\r\n    \r\n    // Handle base64 string\r\n    const base64Data = imageData.replace(/^data:image\\/(png|jpeg|jpg);base64,/, '');\r\n\r\n    const imageParts = [\r\n      {\r\n        inlineData: {\r\n          data: base64Data,\r\n          mimeType: \"image/jpeg\"\r\n        },\r\n      },\r\n    ];\r\n\r\n    const prompt = `Analyze this image and identify what type of waste item it is. Format the response as:\r\n    Name: [item name]\r\n    Material: [material type]\r\n    Category: [waste category]\r\n    BinColor: [bin color]\r\n    Tip: [disposal instructions]`;\r\n\r\n    const result = await model.generateContent([prompt, imageParts[0]]);\r\n    const response = await result.response;\r\n    const text = response.text();\r\n\r\n    // Parse the response\r\n    const lines = text.split('\\n');\r\n    const data = {};\r\n    \r\n    lines.forEach(line => {\r\n      if (line.includes(':')) {\r\n        const [key, value] = line.split(':').map(s => s.trim());\r\n        data[key.toLowerCase()] = value;\r\n      }\r\n    });\r\n\r\n    return {\r\n      id: Date.now().toString(),\r\n      name: data.name || 'Unknown Item',\r\n      material: data.material || 'Unknown',\r\n      category: data.category || 'General Waste',\r\n      binColor: data.bincolor || 'Black',\r\n      tip: data.tip || 'Please dispose of properly',\r\n    };\r\n  } catch (error) {\r\n    console.error('Error in analyzeImage:', error);\r\n    throw new Error(`Failed to analyze image: ${error.message}`);\r\n  }\r\n};\r\n"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,uBAAuB;AAE1D,IAAI,CAACC,OAAO,CAACC,GAAG,CAACC,wBAAwB,EAAE;EACzCC,OAAO,CAACC,KAAK,CAAC,+EAA+E,CAAC;AAChG;AAEA,MAAMC,KAAK,GAAG,IAAIN,kBAAkB,CAACC,OAAO,CAACC,GAAG,CAACC,wBAAwB,IAAI,EAAE,CAAC;AAEhF,OAAO,MAAMI,YAAY,GAAG,MAAOC,SAAS,IAAK;EAC/C,IAAI;IACF,MAAMC,KAAK,GAAGH,KAAK,CAACI,kBAAkB,CAAC;MAAED,KAAK,EAAE;IAAmB,CAAC,CAAC;;IAErE;IACA,MAAME,UAAU,GAAGH,SAAS,CAACI,OAAO,CAAC,qCAAqC,EAAE,EAAE,CAAC;IAE/E,MAAMC,UAAU,GAAG,CACjB;MACEC,UAAU,EAAE;QACVC,IAAI,EAAEJ,UAAU;QAChBK,QAAQ,EAAE;MACZ;IACF,CAAC,CACF;IAED,MAAMC,MAAM,GAAG;AACnB;AACA;AACA;AACA;AACA,iCAAiC;IAE7B,MAAMC,MAAM,GAAG,MAAMT,KAAK,CAACU,eAAe,CAAC,CAACF,MAAM,EAAEJ,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;IACnE,MAAMO,QAAQ,GAAG,MAAMF,MAAM,CAACE,QAAQ;IACtC,MAAMC,IAAI,GAAGD,QAAQ,CAACC,IAAI,CAAC,CAAC;;IAE5B;IACA,MAAMC,KAAK,GAAGD,IAAI,CAACE,KAAK,CAAC,IAAI,CAAC;IAC9B,MAAMR,IAAI,GAAG,CAAC,CAAC;IAEfO,KAAK,CAACE,OAAO,CAACC,IAAI,IAAI;MACpB,IAAIA,IAAI,CAACC,QAAQ,CAAC,GAAG,CAAC,EAAE;QACtB,MAAM,CAACC,GAAG,EAAEC,KAAK,CAAC,GAAGH,IAAI,CAACF,KAAK,CAAC,GAAG,CAAC,CAACM,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;QACvDhB,IAAI,CAACY,GAAG,CAACK,WAAW,CAAC,CAAC,CAAC,GAAGJ,KAAK;MACjC;IACF,CAAC,CAAC;IAEF,OAAO;MACLK,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;MACzBC,IAAI,EAAEtB,IAAI,CAACsB,IAAI,IAAI,cAAc;MACjCC,QAAQ,EAAEvB,IAAI,CAACuB,QAAQ,IAAI,SAAS;MACpCC,QAAQ,EAAExB,IAAI,CAACwB,QAAQ,IAAI,eAAe;MAC1CC,QAAQ,EAAEzB,IAAI,CAAC0B,QAAQ,IAAI,OAAO;MAClCC,GAAG,EAAE3B,IAAI,CAAC2B,GAAG,IAAI;IACnB,CAAC;EACH,CAAC,CAAC,OAAOrC,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAM,IAAIsC,KAAK,CAAC,4BAA4BtC,KAAK,CAACuC,OAAO,EAAE,CAAC;EAC9D;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}