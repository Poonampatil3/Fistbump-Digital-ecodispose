{"ast":null,"code":"import { GoogleGenerativeAI } from \"@google/generative-ai\";\nif (!process.env.REACT_APP_GEMINI_API_KEY) {\n  console.error('Missing Gemini API key! Please add REACT_APP_GEMINI_API_KEY to your .env file');\n}\nconst genAI = new GoogleGenerativeAI(process.env.REACT_APP_GEMINI_API_KEY || '');\nexport const analyzeImage = async imageData => {\n  try {\n    const model = genAI.getGenerativeModel({\n      model: \"gemini-2.0-flash-exp\"\n    });\n\n    // Extract base64 data\n    let base64Data;\n    if (!imageData) {\n      throw new Error('No image data provided');\n    }\n    try {\n      if (imageData.startsWith('data:image/')) {\n        // Handle data URL\n        base64Data = imageData.split(',')[1];\n      } else if (imageData instanceof Blob || imageData instanceof File) {\n        // Convert Blob/File to base64\n        base64Data = await blobToBase64(imageData);\n      } else {\n        throw new Error('Invalid image format');\n      }\n\n      // Enhanced prompt for better structured response\n      const prompt = `Analyze this waste item image and provide the following information in JSON format:\n\n{\n  \"name\": \"specific name of the item (e.g., 'Plastic Water Bottle', 'Glass Jar', 'Aluminum Can')\",\n  \"material\": \"primary material (Plastic/Glass/Metal/Paper/Organic/Hazardous/E-Waste/Unknown)\",\n  \"category\": \"waste category (Plastics & Packaging/Glass/Metals/Paper & Card/Bio-Organic/E-Waste/General Waste)\",\n  \"binColor\": \"recycling bin color (Blue/Green/Yellow/Brown/Gray/Black/Special Collection)\",\n  \"disposal\": \"specific disposal instructions for this item\",\n  \"tips\": [\"tip 1\", \"tip 2\", \"tip 3\"],\n  \"confidence\": \"percentage like 95%\"\n}\n\nImportant:\n- For binColor, use standard recycling colors: Blue (paper), Green (glass/organic), Yellow (plastic/packaging), Brown (organic), Gray (general waste), Black (landfill), or Special Collection (e-waste/hazardous)\n- Be specific with the item name\n- Provide 2-3 practical tips for disposal\n- Only return valid JSON, no additional text`;\n      const imageRequest = {\n        contents: [{\n          parts: [{\n            text: prompt\n          }, {\n            inlineData: {\n              data: base64Data,\n              mimeType: \"image/jpeg\"\n            }\n          }]\n        }]\n      };\n      const result = await model.generateContent(imageRequest);\n      const response = await result.response;\n      const text = response.text();\n      console.log('Raw Gemini Response:', text);\n\n      // Try to extract JSON from the response\n      let parsedData;\n      try {\n        // Remove markdown code blocks if present\n        const cleanedText = text.replace(/```json\\n?/g, '').replace(/```\\n?/g, '').trim();\n        parsedData = JSON.parse(cleanedText);\n      } catch (parseError) {\n        console.error('Failed to parse JSON, attempting fallback parsing:', parseError);\n\n        // Fallback: Try to extract information from natural language response\n        parsedData = extractFromNaturalLanguage(text);\n      }\n\n      // Validate and return structured data\n      return {\n        id: Date.now().toString(),\n        name: parsedData.name || 'Unknown Item',\n        material: parsedData.material || 'Unknown',\n        category: parsedData.category || 'General Waste',\n        disposal: parsedData.disposal || 'Check local guidelines for proper disposal',\n        tips: Array.isArray(parsedData.tips) ? parsedData.tips : ['Ensure item is clean and dry', 'Check local recycling guidelines', 'Remove any non-recyclable components'],\n        confidence: parsedData.confidence || 'N/A',\n        binColor: mapBinColor(parsedData.binColor || parsedData.material)\n      };\n    } catch (error) {\n      console.error('Image processing error:', error);\n      throw new Error(`Image processing failed: ${error.message}`);\n    }\n  } catch (error) {\n    console.error('Error in analyzeImage:', error);\n    throw error;\n  }\n};\n\n// Helper function to extract data from natural language response\nconst extractFromNaturalLanguage = text => {\n  const data = {\n    name: 'Unknown Item',\n    material: 'Unknown',\n    category: 'General Waste',\n    disposal: 'Check local guidelines',\n    binColor: 'gray',\n    tips: []\n  };\n\n  // Try to extract item name\n  const nameMatch = text.match(/(?:item|object|this)(?:\\s+is)?(?:\\s+a)?(?:\\s+an)?\\s*:?\\s*([^.\\n]+)/i);\n  if (nameMatch) {\n    data.name = nameMatch[1].trim();\n  }\n\n  // Try to extract material\n  const materialKeywords = ['plastic', 'glass', 'metal', 'paper', 'cardboard', 'aluminum', 'steel', 'organic', 'wood'];\n  for (const keyword of materialKeywords) {\n    if (text.toLowerCase().includes(keyword)) {\n      data.material = keyword.charAt(0).toUpperCase() + keyword.slice(1);\n      break;\n    }\n  }\n\n  // Try to extract bin color\n  const binColors = ['blue', 'green', 'yellow', 'brown', 'gray', 'black'];\n  for (const color of binColors) {\n    if (text.toLowerCase().includes(color + ' bin')) {\n      data.binColor = color;\n      break;\n    }\n  }\n  return data;\n};\n\n// Helper function to map material/bin color to standard colors\nconst mapBinColor = binColor => {\n  if (!binColor) return 'gray';\n  const colorMap = {\n    // Direct color matches\n    'blue': 'blue',\n    'green': 'green',\n    'yellow': 'yellow',\n    'brown': 'brown',\n    'gray': 'gray',\n    'grey': 'gray',\n    'black': 'gray',\n    // Material to color mappings\n    'plastic': 'yellow',\n    'paper': 'blue',\n    'cardboard': 'blue',\n    'glass': 'green',\n    'metal': 'yellow',\n    'aluminum': 'yellow',\n    'steel': 'yellow',\n    'organic': 'brown',\n    'food': 'brown',\n    'hazardous': 'red',\n    'e-waste': 'red',\n    'battery': 'red',\n    'electronics': 'red'\n  };\n  const normalized = binColor.toLowerCase().trim();\n  return colorMap[normalized] || 'gray';\n};\n\n// Helper function to convert Blob to base64\nconst blobToBase64 = blob => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onloadend = () => {\n      const base64Data = reader.result.split(',')[1];\n      resolve(base64Data);\n    };\n    reader.onerror = reject;\n    reader.readAsDataURL(blob);\n  });\n};","map":{"version":3,"names":["GoogleGenerativeAI","process","env","REACT_APP_GEMINI_API_KEY","console","error","genAI","analyzeImage","imageData","model","getGenerativeModel","base64Data","Error","startsWith","split","Blob","File","blobToBase64","prompt","imageRequest","contents","parts","text","inlineData","data","mimeType","result","generateContent","response","log","parsedData","cleanedText","replace","trim","JSON","parse","parseError","extractFromNaturalLanguage","id","Date","now","toString","name","material","category","disposal","tips","Array","isArray","confidence","binColor","mapBinColor","message","nameMatch","match","materialKeywords","keyword","toLowerCase","includes","charAt","toUpperCase","slice","binColors","color","colorMap","normalized","blob","Promise","resolve","reject","reader","FileReader","onloadend","onerror","readAsDataURL"],"sources":["C:/Users/patil/Desktop/fistbump2-main/src/services/geminiService.js"],"sourcesContent":["import { GoogleGenerativeAI } from \"@google/generative-ai\";\r\n\r\nif (!process.env.REACT_APP_GEMINI_API_KEY) {\r\n  console.error('Missing Gemini API key! Please add REACT_APP_GEMINI_API_KEY to your .env file');\r\n}\r\n\r\nconst genAI = new GoogleGenerativeAI(process.env.REACT_APP_GEMINI_API_KEY || '');\r\n\r\nexport const analyzeImage = async (imageData) => {\r\n  try {\r\n    const model = genAI.getGenerativeModel({ model: \"gemini-2.0-flash-exp\" });\r\n\r\n    // Extract base64 data\r\n    let base64Data;\r\n    if (!imageData) {\r\n      throw new Error('No image data provided');\r\n    }\r\n\r\n    try {\r\n      if (imageData.startsWith('data:image/')) {\r\n        // Handle data URL\r\n        base64Data = imageData.split(',')[1];\r\n      } else if (imageData instanceof Blob || imageData instanceof File) {\r\n        // Convert Blob/File to base64\r\n        base64Data = await blobToBase64(imageData);\r\n      } else {\r\n        throw new Error('Invalid image format');\r\n      }\r\n\r\n      // Enhanced prompt for better structured response\r\n      const prompt = `Analyze this waste item image and provide the following information in JSON format:\r\n\r\n{\r\n  \"name\": \"specific name of the item (e.g., 'Plastic Water Bottle', 'Glass Jar', 'Aluminum Can')\",\r\n  \"material\": \"primary material (Plastic/Glass/Metal/Paper/Organic/Hazardous/E-Waste/Unknown)\",\r\n  \"category\": \"waste category (Plastics & Packaging/Glass/Metals/Paper & Card/Bio-Organic/E-Waste/General Waste)\",\r\n  \"binColor\": \"recycling bin color (Blue/Green/Yellow/Brown/Gray/Black/Special Collection)\",\r\n  \"disposal\": \"specific disposal instructions for this item\",\r\n  \"tips\": [\"tip 1\", \"tip 2\", \"tip 3\"],\r\n  \"confidence\": \"percentage like 95%\"\r\n}\r\n\r\nImportant:\r\n- For binColor, use standard recycling colors: Blue (paper), Green (glass/organic), Yellow (plastic/packaging), Brown (organic), Gray (general waste), Black (landfill), or Special Collection (e-waste/hazardous)\r\n- Be specific with the item name\r\n- Provide 2-3 practical tips for disposal\r\n- Only return valid JSON, no additional text`;\r\n\r\n      const imageRequest = {\r\n        contents: [{\r\n          parts: [\r\n            { text: prompt },\r\n            {\r\n              inlineData: {\r\n                data: base64Data,\r\n                mimeType: \"image/jpeg\"\r\n              }\r\n            }\r\n          ]\r\n        }]\r\n      };\r\n\r\n      const result = await model.generateContent(imageRequest);\r\n      const response = await result.response;\r\n      const text = response.text();\r\n\r\n      console.log('Raw Gemini Response:', text);\r\n\r\n      // Try to extract JSON from the response\r\n      let parsedData;\r\n      try {\r\n        // Remove markdown code blocks if present\r\n        const cleanedText = text.replace(/```json\\n?/g, '').replace(/```\\n?/g, '').trim();\r\n        parsedData = JSON.parse(cleanedText);\r\n      } catch (parseError) {\r\n        console.error('Failed to parse JSON, attempting fallback parsing:', parseError);\r\n        \r\n        // Fallback: Try to extract information from natural language response\r\n        parsedData = extractFromNaturalLanguage(text);\r\n      }\r\n\r\n      // Validate and return structured data\r\n      return {\r\n        id: Date.now().toString(),\r\n        name: parsedData.name || 'Unknown Item',\r\n        material: parsedData.material || 'Unknown',\r\n        category: parsedData.category || 'General Waste',\r\n        disposal: parsedData.disposal || 'Check local guidelines for proper disposal',\r\n        tips: Array.isArray(parsedData.tips) ? parsedData.tips : [\r\n          'Ensure item is clean and dry',\r\n          'Check local recycling guidelines',\r\n          'Remove any non-recyclable components'\r\n        ],\r\n        confidence: parsedData.confidence || 'N/A',\r\n        binColor: mapBinColor(parsedData.binColor || parsedData.material)\r\n      };\r\n    } catch (error) {\r\n      console.error('Image processing error:', error);\r\n      throw new Error(`Image processing failed: ${error.message}`);\r\n    }\r\n  } catch (error) {\r\n    console.error('Error in analyzeImage:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Helper function to extract data from natural language response\r\nconst extractFromNaturalLanguage = (text) => {\r\n  const data = {\r\n    name: 'Unknown Item',\r\n    material: 'Unknown',\r\n    category: 'General Waste',\r\n    disposal: 'Check local guidelines',\r\n    binColor: 'gray',\r\n    tips: []\r\n  };\r\n\r\n  // Try to extract item name\r\n  const nameMatch = text.match(/(?:item|object|this)(?:\\s+is)?(?:\\s+a)?(?:\\s+an)?\\s*:?\\s*([^.\\n]+)/i);\r\n  if (nameMatch) {\r\n    data.name = nameMatch[1].trim();\r\n  }\r\n\r\n  // Try to extract material\r\n  const materialKeywords = ['plastic', 'glass', 'metal', 'paper', 'cardboard', 'aluminum', 'steel', 'organic', 'wood'];\r\n  for (const keyword of materialKeywords) {\r\n    if (text.toLowerCase().includes(keyword)) {\r\n      data.material = keyword.charAt(0).toUpperCase() + keyword.slice(1);\r\n      break;\r\n    }\r\n  }\r\n\r\n  // Try to extract bin color\r\n  const binColors = ['blue', 'green', 'yellow', 'brown', 'gray', 'black'];\r\n  for (const color of binColors) {\r\n    if (text.toLowerCase().includes(color + ' bin')) {\r\n      data.binColor = color;\r\n      break;\r\n    }\r\n  }\r\n\r\n  return data;\r\n};\r\n\r\n// Helper function to map material/bin color to standard colors\r\nconst mapBinColor = (binColor) => {\r\n  if (!binColor) return 'gray';\r\n  \r\n  const colorMap = {\r\n    // Direct color matches\r\n    'blue': 'blue',\r\n    'green': 'green',\r\n    'yellow': 'yellow',\r\n    'brown': 'brown',\r\n    'gray': 'gray',\r\n    'grey': 'gray',\r\n    'black': 'gray',\r\n    \r\n    // Material to color mappings\r\n    'plastic': 'yellow',\r\n    'paper': 'blue',\r\n    'cardboard': 'blue',\r\n    'glass': 'green',\r\n    'metal': 'yellow',\r\n    'aluminum': 'yellow',\r\n    'steel': 'yellow',\r\n    'organic': 'brown',\r\n    'food': 'brown',\r\n    'hazardous': 'red',\r\n    'e-waste': 'red',\r\n    'battery': 'red',\r\n    'electronics': 'red'\r\n  };\r\n\r\n  const normalized = binColor.toLowerCase().trim();\r\n  return colorMap[normalized] || 'gray';\r\n};\r\n\r\n// Helper function to convert Blob to base64\r\nconst blobToBase64 = (blob) => {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.onloadend = () => {\r\n      const base64Data = reader.result.split(',')[1];\r\n      resolve(base64Data);\r\n    };\r\n    reader.onerror = reject;\r\n    reader.readAsDataURL(blob);\r\n  });\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}