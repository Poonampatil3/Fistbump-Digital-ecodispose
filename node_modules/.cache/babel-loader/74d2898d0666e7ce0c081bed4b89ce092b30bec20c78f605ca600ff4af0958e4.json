{"ast":null,"code":"import { GoogleGenerativeAI } from \"@google/generative-ai\";\nif (!process.env.REACT_APP_GEMINI_API_KEY) {\n  console.error('Missing Gemini API key! Please add REACT_APP_GEMINI_API_KEY to your .env file');\n}\nconst genAI = new GoogleGenerativeAI(process.env.REACT_APP_GEMINI_API_KEY || '');\nexport const analyzeImage = async imageData => {\n  try {\n    const model = genAI.getGenerativeModel({\n      model: \"gemini-2.5-flash\"\n    });\n\n    // Validate and extract base64 data\n    let base64Data;\n    try {\n      if (imageData instanceof Blob || imageData instanceof File) {\n        // Convert Blob/File to base64\n        base64Data = await new Promise((resolve, reject) => {\n          const reader = new FileReader();\n          reader.onload = () => {\n            const dataUrl = reader.result;\n            resolve(dataUrl.split(',')[1]); // Extract base64 data\n          };\n          reader.onerror = reject;\n          reader.readAsDataURL(imageData);\n        });\n      } else if (typeof imageData === 'string') {\n        // Handle base64 string (with or without data URL prefix)\n        base64Data = imageData.includes('base64,') ? imageData.split('base64,')[1] : imageData;\n      } else {\n        throw new Error('Invalid image data format: Must be File, Blob, or base64 string');\n      }\n      const imageParts = [{\n        inlineData: {\n          data: base64Data,\n          mimeType: \"image/jpeg\"\n        }\n      }];\n\n      // Ensure the model is ready before sending data\n      await new Promise(resolve => setTimeout(resolve, 100));\n      const result = await model.generateContent([{\n        text: \"Analyze this image and identify what type of waste item it is. Provide details about material, recyclability, and proper disposal method.\"\n      }, ...imageParts]);\n      const response = await result.response;\n      const text = response.text();\n\n      // Parse the response\n      const lines = text.split('\\n');\n      const data = {};\n      lines.forEach(line => {\n        if (line.includes(':')) {\n          const [key, value] = line.split(':').map(s => s.trim());\n          data[key.toLowerCase()] = value;\n        }\n      });\n      return {\n        id: Date.now().toString(),\n        name: data.name || 'Unknown Item',\n        material: data.material || 'Unknown',\n        category: data.category || 'General Waste',\n        binColor: data.bincolor || 'Black',\n        tip: data.tip || 'Please dispose of properly'\n      };\n    } catch (error) {\n      throw new Error(`Image processing failed: ${error.message}`);\n    }\n  } catch (error) {\n    console.error('Error in analyzeImage:', error);\n    throw new Error(`Image analysis failed: ${error.message}`);\n  }\n};\n\n// Helper function to validate base64 string\nfunction isValidBase64(str) {\n  try {\n    // Check if the string contains valid base64 characters\n    if (!/^[A-Za-z0-9+/=]+$/.test(str)) return false;\n\n    // Check if length is valid (multiple of 4)\n    if (str.length % 4 !== 0) return false;\n\n    // Try decoding\n    return btoa(atob(str)) === str;\n  } catch (e) {\n    return false;\n  }\n}","map":{"version":3,"names":["GoogleGenerativeAI","process","env","REACT_APP_GEMINI_API_KEY","console","error","genAI","analyzeImage","imageData","model","getGenerativeModel","base64Data","Blob","File","Promise","resolve","reject","reader","FileReader","onload","dataUrl","result","split","onerror","readAsDataURL","includes","Error","imageParts","inlineData","data","mimeType","setTimeout","generateContent","text","response","lines","forEach","line","key","value","map","s","trim","toLowerCase","id","Date","now","toString","name","material","category","binColor","bincolor","tip","message","isValidBase64","str","test","length","btoa","atob","e"],"sources":["C:/Users/patil/Desktop/fistbump2-main/src/services/geminiService.js"],"sourcesContent":["import { GoogleGenerativeAI } from \"@google/generative-ai\";\r\n\r\nif (!process.env.REACT_APP_GEMINI_API_KEY) {\r\n  console.error('Missing Gemini API key! Please add REACT_APP_GEMINI_API_KEY to your .env file');\r\n}\r\n\r\nconst genAI = new GoogleGenerativeAI(process.env.REACT_APP_GEMINI_API_KEY || '');\r\n\r\nexport const analyzeImage = async (imageData) => {\r\n  try {\r\n    const model = genAI.getGenerativeModel({ model: \"gemini-2.5-flash\" });\r\n    \r\n    // Validate and extract base64 data\r\n    let base64Data;\r\n    try {\r\n      if (imageData instanceof Blob || imageData instanceof File) {\r\n        // Convert Blob/File to base64\r\n        base64Data = await new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.onload = () => {\r\n            const dataUrl = reader.result;\r\n            resolve(dataUrl.split(',')[1]); // Extract base64 data\r\n          };\r\n          reader.onerror = reject;\r\n          reader.readAsDataURL(imageData);\r\n        });\r\n      } else if (typeof imageData === 'string') {\r\n        // Handle base64 string (with or without data URL prefix)\r\n        base64Data = imageData.includes('base64,') \r\n          ? imageData.split('base64,')[1]\r\n          : imageData;\r\n      } else {\r\n        throw new Error('Invalid image data format: Must be File, Blob, or base64 string');\r\n      }\r\n\r\n      const imageParts = [\r\n        {\r\n          inlineData: {\r\n            data: base64Data,\r\n            mimeType: \"image/jpeg\"\r\n          },\r\n        },\r\n      ];\r\n\r\n      // Ensure the model is ready before sending data\r\n      await new Promise(resolve => setTimeout(resolve, 100));\r\n\r\n      const result = await model.generateContent([\r\n        {\r\n          text: \"Analyze this image and identify what type of waste item it is. Provide details about material, recyclability, and proper disposal method.\"\r\n        },\r\n        ...imageParts\r\n      ]);\r\n\r\n      const response = await result.response;\r\n      const text = response.text();\r\n\r\n      // Parse the response\r\n      const lines = text.split('\\n');\r\n      const data = {};\r\n      \r\n      lines.forEach(line => {\r\n        if (line.includes(':')) {\r\n          const [key, value] = line.split(':').map(s => s.trim());\r\n          data[key.toLowerCase()] = value;\r\n        }\r\n      });\r\n\r\n      return {\r\n        id: Date.now().toString(),\r\n        name: data.name || 'Unknown Item',\r\n        material: data.material || 'Unknown',\r\n        category: data.category || 'General Waste',\r\n        binColor: data.bincolor || 'Black',\r\n        tip: data.tip || 'Please dispose of properly',\r\n      };\r\n    } catch (error) {\r\n      throw new Error(`Image processing failed: ${error.message}`);\r\n    }\r\n  } catch (error) {\r\n    console.error('Error in analyzeImage:', error);\r\n    throw new Error(`Image analysis failed: ${error.message}`);\r\n  }\r\n};\r\n\r\n// Helper function to validate base64 string\r\nfunction isValidBase64(str) {\r\n  try {\r\n    // Check if the string contains valid base64 characters\r\n    if (!/^[A-Za-z0-9+/=]+$/.test(str)) return false;\r\n    \r\n    // Check if length is valid (multiple of 4)\r\n    if (str.length % 4 !== 0) return false;\r\n    \r\n    // Try decoding\r\n    return btoa(atob(str)) === str;\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}