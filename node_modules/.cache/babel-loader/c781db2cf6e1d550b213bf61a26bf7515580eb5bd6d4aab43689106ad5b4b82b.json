{"ast":null,"code":"import { GoogleGenerativeAI } from \"@google/generative-ai\";\n\n// Make sure your .env file has the API key\nif (!process.env.REACT_APP_GEMINI_API_KEY) {\n  console.error('Missing Gemini API key! Please add REACT_APP_GEMINI_API_KEY to your .env file');\n}\nconst genAI = new GoogleGenerativeAI(process.env.REACT_APP_GEMINI_API_KEY || '');\nexport const analyzeImage = async imageData => {\n  try {\n    const model = genAI.getGenerativeModel({\n      model: \"gemini-2.5-flash\"\n    });\n\n    // Convert base64 to Uint8Array\n    const base64Data = imageData.split(',')[1];\n    const binaryData = atob(base64Data);\n    const bytes = new Uint8Array(binaryData.length);\n    for (let i = 0; i < binaryData.length; i++) {\n      bytes[i] = binaryData.charCodeAt(i);\n    }\n    const imageParts = [{\n      inlineData: {\n        data: base64Data,\n        mimeType: \"image/jpeg\"\n      }\n    }];\n    const prompt = `Analyze this image and provide waste disposal information in the following format:\n      1. What is the item in the image?\n      2. What material is it made of? (Plastic/Glass/Paper/Metal/Organic/Hazardous)\n      3. Is it recyclable? (Yes/No)\n      4. Which bin should it go in? Use these colors:\n         - Blue bin: Paper, cardboard\n         - Yellow bin: Plastic, metal packaging\n         - Green bin: Glass\n         - Brown bin: Organic waste\n         - Black bin: General waste\n         - Red bin: Hazardous waste\n      \n      Format your response exactly like this example:\n      Name: [item name]\n      Material: [material type]\n      Recyclable: [Yes/No]\n      Bin: [color] bin\n      Tip: [disposal instructions]`;\n    const result = await model.generateContent([prompt, ...imageParts]);\n    const response = await result.response;\n    const text = response.text();\n\n    // Parse the structured response\n    const lines = text.split('\\n');\n    const parsedResponse = {};\n    lines.forEach(line => {\n      if (line.includes(':')) {\n        const [key, value] = line.split(':').map(str => str.trim());\n        parsedResponse[key.toLowerCase()] = value;\n      }\n    });\n\n    // Determine bin color based on material and recyclability\n    let binColor = 'Black'; // Default to general waste\n    if (parsedResponse.material) {\n      var _parsedResponse$recyc;\n      const material = parsedResponse.material.toLowerCase();\n      const isRecyclable = ((_parsedResponse$recyc = parsedResponse.recyclable) === null || _parsedResponse$recyc === void 0 ? void 0 : _parsedResponse$recyc.toLowerCase()) === 'yes';\n      if (material.includes('paper') || material.includes('cardboard')) {\n        binColor = 'Blue';\n      } else if (material.includes('plastic') || material.includes('metal')) {\n        binColor = 'Yellow';\n      } else if (material.includes('glass')) {\n        binColor = 'Green';\n      } else if (material.includes('organic') || material.includes('food')) {\n        binColor = 'Brown';\n      } else if (material.includes('hazardous') || material.includes('battery')) {\n        binColor = 'Red';\n      }\n\n      // Override if explicitly mentioned in the response\n      if (parsedResponse.bin && parsedResponse.bin.toLowerCase().includes('bin')) {\n        const extractedColor = parsedResponse.bin.split(' ')[0];\n        if (extractedColor) {\n          binColor = extractedColor;\n        }\n      }\n    }\n    return {\n      name: parsedResponse.name || \"Unknown Item\",\n      material: parsedResponse.material || \"Unknown Material\",\n      category: parsedResponse.recyclable === 'Yes' ? 'Recyclables' : 'General Waste',\n      binColor: binColor,\n      tip: parsedResponse.tip || text\n    };\n  } catch (error) {\n    console.error('Error analyzing image:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["GoogleGenerativeAI","process","env","REACT_APP_GEMINI_API_KEY","console","error","genAI","analyzeImage","imageData","model","getGenerativeModel","base64Data","split","binaryData","atob","bytes","Uint8Array","length","i","charCodeAt","imageParts","inlineData","data","mimeType","prompt","result","generateContent","response","text","lines","parsedResponse","forEach","line","includes","key","value","map","str","trim","toLowerCase","binColor","material","_parsedResponse$recyc","isRecyclable","recyclable","bin","extractedColor","name","category","tip"],"sources":["C:/Users/patil/Desktop/fistbump2-main/src/services/geminiService.js"],"sourcesContent":["import { GoogleGenerativeAI } from \"@google/generative-ai\";\r\n\r\n// Make sure your .env file has the API key\r\nif (!process.env.REACT_APP_GEMINI_API_KEY) {\r\n  console.error('Missing Gemini API key! Please add REACT_APP_GEMINI_API_KEY to your .env file');\r\n}\r\n\r\nconst genAI = new GoogleGenerativeAI(process.env.REACT_APP_GEMINI_API_KEY || '');\r\n\r\nexport const analyzeImage = async (imageData) => {\r\n  try {\r\n    const model = genAI.getGenerativeModel({ model: \"gemini-2.5-flash\" });\r\n    \r\n    // Convert base64 to Uint8Array\r\n    const base64Data = imageData.split(',')[1];\r\n    const binaryData = atob(base64Data);\r\n    const bytes = new Uint8Array(binaryData.length);\r\n    for (let i = 0; i < binaryData.length; i++) {\r\n      bytes[i] = binaryData.charCodeAt(i);\r\n    }\r\n\r\n    const imageParts = [\r\n      {\r\n        inlineData: {\r\n          data: base64Data,\r\n          mimeType: \"image/jpeg\"\r\n        },\r\n      },\r\n    ];\r\n\r\n    const prompt = `Analyze this image and provide waste disposal information in the following format:\r\n      1. What is the item in the image?\r\n      2. What material is it made of? (Plastic/Glass/Paper/Metal/Organic/Hazardous)\r\n      3. Is it recyclable? (Yes/No)\r\n      4. Which bin should it go in? Use these colors:\r\n         - Blue bin: Paper, cardboard\r\n         - Yellow bin: Plastic, metal packaging\r\n         - Green bin: Glass\r\n         - Brown bin: Organic waste\r\n         - Black bin: General waste\r\n         - Red bin: Hazardous waste\r\n      \r\n      Format your response exactly like this example:\r\n      Name: [item name]\r\n      Material: [material type]\r\n      Recyclable: [Yes/No]\r\n      Bin: [color] bin\r\n      Tip: [disposal instructions]`;\r\n\r\n    const result = await model.generateContent([prompt, ...imageParts]);\r\n    const response = await result.response;\r\n    const text = response.text();\r\n\r\n    // Parse the structured response\r\n    const lines = text.split('\\n');\r\n    const parsedResponse = {};\r\n    \r\n    lines.forEach(line => {\r\n      if (line.includes(':')) {\r\n        const [key, value] = line.split(':').map(str => str.trim());\r\n        parsedResponse[key.toLowerCase()] = value;\r\n      }\r\n    });\r\n\r\n    // Determine bin color based on material and recyclability\r\n    let binColor = 'Black'; // Default to general waste\r\n    if (parsedResponse.material) {\r\n      const material = parsedResponse.material.toLowerCase();\r\n      const isRecyclable = parsedResponse.recyclable?.toLowerCase() === 'yes';\r\n\r\n      if (material.includes('paper') || material.includes('cardboard')) {\r\n        binColor = 'Blue';\r\n      } else if (material.includes('plastic') || material.includes('metal')) {\r\n        binColor = 'Yellow';\r\n      } else if (material.includes('glass')) {\r\n        binColor = 'Green';\r\n      } else if (material.includes('organic') || material.includes('food')) {\r\n        binColor = 'Brown';\r\n      } else if (material.includes('hazardous') || material.includes('battery')) {\r\n        binColor = 'Red';\r\n      }\r\n      \r\n      // Override if explicitly mentioned in the response\r\n      if (parsedResponse.bin && parsedResponse.bin.toLowerCase().includes('bin')) {\r\n        const extractedColor = parsedResponse.bin.split(' ')[0];\r\n        if (extractedColor) {\r\n          binColor = extractedColor;\r\n        }\r\n      }\r\n    }\r\n\r\n    return {\r\n      name: parsedResponse.name || \"Unknown Item\",\r\n      material: parsedResponse.material || \"Unknown Material\",\r\n      category: parsedResponse.recyclable === 'Yes' ? 'Recyclables' : 'General Waste',\r\n      binColor: binColor,\r\n      tip: parsedResponse.tip || text,\r\n    };\r\n  } catch (error) {\r\n    console.error('Error analyzing image:', error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}