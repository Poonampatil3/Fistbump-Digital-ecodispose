{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\patil\\\\Desktop\\\\fistbump2-main\\\\src\\\\components\\\\CameraInput\\\\CameraInput.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport Results from './Results'; // Import Results component to show analysis results\nimport './CameraInput.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GEMINI_API_KEY = 'AIzaSyAvWsTj69wj-K7UTqrDURml48kklsdR0-k';\nconst GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent';\nconst CameraInput = ({\n  onImageCapture,\n  onImageUpload\n}) => {\n  _s();\n  const fileInputRef = useRef(null);\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [stream, setStream] = useState(null);\n  const [isCameraActive, setIsCameraActive] = useState(false);\n  const [previewImage, setPreviewImage] = useState(null);\n  const [analysisResult, setAnalysisResult] = useState(null); // New state for API analysis result\n  const [isDragging, setIsDragging] = useState(false);\n  const [cameraError, setCameraError] = useState(null);\n  const [isCapturing, setIsCapturing] = useState(false);\n  const [videoReady, setVideoReady] = useState(false);\n  const [cameraStarted, setCameraStarted] = useState(false);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n\n  // Cleanup and other useEffects remain unchanged...\n\n  // New analyze function from your existing code adapted to set result\n  const analyzeImageWithGemini = async imageData => {\n    try {\n      setIsAnalyzing(true);\n      const base64String = imageData.split(',')[1] || imageData;\n      const response = await fetch(GEMINI_API_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${GEMINI_API_KEY}` // Add API key in header\n        },\n        body: JSON.stringify({\n          contents: [{\n            parts: [{\n              text: `Analyze this waste/recycling item image and provide detailed information in JSON format with these fields:\n                {\n                  \"name\": \"item name\",\n                  \"material\": \"material type (Plastic/Glass/Metal/Paper/Organic/Hazardous/Unknown)\",\n                  \"category\": \"waste category\",\n                  \"disposal\": \"disposal instructions\",\n                  \"binColor\": \"bin color (Yellow/Blue/Green/Brown/Gray)\",\n                  \"tips\": [\"tip1\", \"tip2\", \"tip3\"],\n                  \"confidence\": \"confidence percentage\"\n                }\n                Analyze the image carefully and provide accurate recycling information.`\n            }, {\n              inline_data: {\n                mime_type: 'image/jpeg',\n                data: base64String\n              }\n            }]\n          }]\n        })\n      });\n      if (!response.ok) throw new Error(`API error: ${response.status}`);\n      const data = await response.json();\n      if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) throw new Error('Invalid API response');\n      const textContent = data.candidates[0].content.parts[0].text;\n      const jsonMatch = textContent.match(/\\{[\\s\\S]*\\}/);\n      if (!jsonMatch) throw new Error('No JSON found in response');\n      const result = JSON.parse(jsonMatch[0]);\n      return {\n        id: result.name.toLowerCase().replace(/\\s+/g, '-'),\n        name: result.name,\n        material: result.material,\n        category: result.category,\n        disposal: result.disposal,\n        tips: result.tips,\n        binColor: result.binColor,\n        confidence: result.confidence || '85%',\n        upcycling: `Creative ways to reuse ${result.name}`,\n        image: '/api/placeholder/200/200' // Or actual image URL if available\n      };\n    } catch (error) {\n      setCameraError('Gemini API error: ' + error.message);\n      throw error;\n    } finally {\n      setIsAnalyzing(false);\n    }\n  };\n\n  // Updated captureImage handler to set analysis result and show it\n  const captureImage = useCallback(async () => {\n    if (videoRef.current && canvasRef.current && videoReady) {\n      const video = videoRef.current;\n      if (video.videoWidth === 0 || video.videoHeight === 0 || video.readyState < 2) {\n        setCameraError('Camera not ready. Please wait a moment and try again.');\n        return;\n      }\n      setIsCapturing(true);\n      const canvas = canvasRef.current;\n      const context = canvas.getContext('2d');\n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight;\n      context.drawImage(video, 0, 0, canvas.width, canvas.height);\n      const imageSrc = canvas.toDataURL('image/jpeg', 0.9);\n      try {\n        const result = await analyzeImageWithGemini(imageSrc);\n        setAnalysisResult(result);\n        stopCamera();\n      } catch (error) {\n        setCameraError('Failed to analyze image: ' + error.message);\n      } finally {\n        setIsCapturing(false);\n      }\n    } else {\n      setCameraError('Camera not ready. Please wait for the camera to initialize.');\n    }\n  }, [videoReady]);\n\n  // Similar update for handleAnalyze with previewImage\n\n  // Method to reset analysis results and preview or camera states\n  const resetResults = () => {\n    setAnalysisResult(null);\n    setPreviewImage(null);\n    setCameraError(null);\n  };\n\n  // Render result view if analysisResult is present else camera UI\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"camera-input-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(AnimatePresence, {\n      children: analysisResult ? /*#__PURE__*/_jsxDEV(Results, {\n        result: analysisResult,\n        onClose: resetResults\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n};\n_s(CameraInput, \"RJi0g3bKG8fyBuFvZjU6JfzOGNU=\");\n_c = CameraInput;\nexport default CameraInput;\nvar _c;\n$RefreshReg$(_c, \"CameraInput\");","map":{"version":3,"names":["React","useRef","useState","useEffect","useCallback","motion","AnimatePresence","Results","jsxDEV","_jsxDEV","Fragment","_Fragment","GEMINI_API_KEY","GEMINI_API_URL","CameraInput","onImageCapture","onImageUpload","_s","fileInputRef","videoRef","canvasRef","stream","setStream","isCameraActive","setIsCameraActive","previewImage","setPreviewImage","analysisResult","setAnalysisResult","isDragging","setIsDragging","cameraError","setCameraError","isCapturing","setIsCapturing","videoReady","setVideoReady","cameraStarted","setCameraStarted","isAnalyzing","setIsAnalyzing","analyzeImageWithGemini","imageData","base64String","split","response","fetch","method","headers","body","JSON","stringify","contents","parts","text","inline_data","mime_type","data","ok","Error","status","json","candidates","content","textContent","jsonMatch","match","result","parse","id","name","toLowerCase","replace","material","category","disposal","tips","binColor","confidence","upcycling","image","error","message","captureImage","current","video","videoWidth","videoHeight","readyState","canvas","context","getContext","width","height","drawImage","imageSrc","toDataURL","stopCamera","resetResults","className","children","onClose","fileName","_jsxFileName","lineNumber","columnNumber","ref","style","display","_c","$RefreshReg$"],"sources":["C:/Users/patil/Desktop/fistbump2-main/src/components/CameraInput/CameraInput.jsx"],"sourcesContent":["import React, { useRef, useState, useEffect, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport Results from './Results'; // Import Results component to show analysis results\nimport './CameraInput.css';\n\nconst GEMINI_API_KEY = 'AIzaSyAvWsTj69wj-K7UTqrDURml48kklsdR0-k'; \nconst GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent';\n\nconst CameraInput = ({ onImageCapture, onImageUpload }) => {\n  const fileInputRef = useRef(null);\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [stream, setStream] = useState(null);\n  const [isCameraActive, setIsCameraActive] = useState(false);\n  const [previewImage, setPreviewImage] = useState(null);\n  const [analysisResult, setAnalysisResult] = useState(null); // New state for API analysis result\n  const [isDragging, setIsDragging] = useState(false);\n  const [cameraError, setCameraError] = useState(null);\n  const [isCapturing, setIsCapturing] = useState(false);\n  const [videoReady, setVideoReady] = useState(false);\n  const [cameraStarted, setCameraStarted] = useState(false);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n\n  // Cleanup and other useEffects remain unchanged...\n\n  // New analyze function from your existing code adapted to set result\n  const analyzeImageWithGemini = async (imageData) => {\n    try {\n      setIsAnalyzing(true);\n      const base64String = imageData.split(',')[1] || imageData;\n      const response = await fetch(GEMINI_API_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${GEMINI_API_KEY}`, // Add API key in header\n        },\n        body: JSON.stringify({\n          contents: [{\n            parts: [\n              {\n                text: `Analyze this waste/recycling item image and provide detailed information in JSON format with these fields:\n                {\n                  \"name\": \"item name\",\n                  \"material\": \"material type (Plastic/Glass/Metal/Paper/Organic/Hazardous/Unknown)\",\n                  \"category\": \"waste category\",\n                  \"disposal\": \"disposal instructions\",\n                  \"binColor\": \"bin color (Yellow/Blue/Green/Brown/Gray)\",\n                  \"tips\": [\"tip1\", \"tip2\", \"tip3\"],\n                  \"confidence\": \"confidence percentage\"\n                }\n                Analyze the image carefully and provide accurate recycling information.`\n              },\n              {\n                inline_data: {\n                  mime_type: 'image/jpeg',\n                  data: base64String\n                }\n              }\n            ]\n          }]\n        })\n      });\n      if (!response.ok) throw new Error(`API error: ${response.status}`);\n\n      const data = await response.json();\n      if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) throw new Error('Invalid API response');\n\n      const textContent = data.candidates[0].content.parts[0].text;\n      const jsonMatch = textContent.match(/\\{[\\s\\S]*\\}/);\n      if (!jsonMatch) throw new Error('No JSON found in response');\n\n      const result = JSON.parse(jsonMatch[0]);\n      return {\n        id: result.name.toLowerCase().replace(/\\s+/g, '-'),\n        name: result.name,\n        material: result.material,\n        category: result.category,\n        disposal: result.disposal,\n        tips: result.tips,\n        binColor: result.binColor,\n        confidence: result.confidence || '85%',\n        upcycling: `Creative ways to reuse ${result.name}`,\n        image: '/api/placeholder/200/200' // Or actual image URL if available\n      };\n    } catch (error) {\n      setCameraError('Gemini API error: ' + error.message);\n      throw error;\n    } finally {\n      setIsAnalyzing(false);\n    }\n  };\n\n  // Updated captureImage handler to set analysis result and show it\n  const captureImage = useCallback(async () => {\n    if (videoRef.current && canvasRef.current && videoReady) {\n      const video = videoRef.current;\n      if (video.videoWidth === 0 || video.videoHeight === 0 || video.readyState < 2) {\n        setCameraError('Camera not ready. Please wait a moment and try again.');\n        return;\n      }\n      setIsCapturing(true);\n\n      const canvas = canvasRef.current;\n      const context = canvas.getContext('2d');\n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight;\n      context.drawImage(video, 0, 0, canvas.width, canvas.height);\n      const imageSrc = canvas.toDataURL('image/jpeg', 0.9);\n\n      try {\n        const result = await analyzeImageWithGemini(imageSrc);\n        setAnalysisResult(result);\n        stopCamera();\n      } catch (error) {\n        setCameraError('Failed to analyze image: ' + error.message);\n      } finally {\n        setIsCapturing(false);\n      }\n    } else {\n      setCameraError('Camera not ready. Please wait for the camera to initialize.');\n    }\n  }, [videoReady]);\n\n  // Similar update for handleAnalyze with previewImage\n\n  // Method to reset analysis results and preview or camera states\n  const resetResults = () => {\n    setAnalysisResult(null);\n    setPreviewImage(null);\n    setCameraError(null);\n  };\n\n  // Render result view if analysisResult is present else camera UI\n  return (\n    <div className=\"camera-input-wrapper\">\n\n      <AnimatePresence>\n        {analysisResult ? (\n          <Results\n            result={analysisResult}\n            onClose={resetResults}\n          />\n        ) : (\n          <>\n            {/* Keep your existing camera input and preview JSX here */}\n            {/* Including video, drag-drop, buttons etc */}\n          </>\n        )}\n      </AnimatePresence>\n\n      <canvas ref={canvasRef} style={{ display: 'none' }} />\n    </div>\n  );\n};\n\nexport default CameraInput;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}