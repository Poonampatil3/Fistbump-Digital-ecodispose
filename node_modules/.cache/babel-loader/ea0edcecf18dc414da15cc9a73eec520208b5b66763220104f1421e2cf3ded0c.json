{"ast":null,"code":"import { GoogleGenerativeAI } from \"@google/generative-ai\";\n\n// Make sure your .env file has the API key\nif (!process.env.REACT_APP_GEMINI_API_KEY) {\n  console.error('Missing Gemini API key! Please add REACT_APP_GEMINI_API_KEY to your .env file');\n}\nconst genAI = new GoogleGenerativeAI(process.env.REACT_APP_GEMINI_API_KEY || '');\nexport const analyzeImage = async imageData => {\n  try {\n    const model = genAI.getGenerativeModel({\n      model: \"gemini-2.5-flash\"\n    });\n\n    // Convert base64 to Uint8Array\n    const base64Data = imageData.split(',')[1];\n    const binaryData = atob(base64Data);\n    const bytes = new Uint8Array(binaryData.length);\n    for (let i = 0; i < binaryData.length; i++) {\n      bytes[i] = binaryData.charCodeAt(i);\n    }\n    const imageParts = [{\n      inlineData: {\n        data: base64Data,\n        mimeType: \"image/jpeg\"\n      }\n    }];\n    const prompt = `Analyze this image and provide waste classification details in the following strict format:\n\n    Name: [name of the item]\n    Material: [Plastic/Glass/Paper/Metal/Organic/Hazardous]\n    Category: [type of waste]\n    BinColor: [Yellow/Blue/Green/Brown/Black/Red]\n    Tip: [disposal instructions]\n\n    Yellow bin is for plastic and metal\n    Blue bin is for paper and cardboard\n    Green bin is for glass\n    Brown bin is for organic waste\n    Black bin is for general waste\n    Red bin is for hazardous materials`;\n    const result = await model.generateContent([prompt, ...imageParts]);\n    const response = await result.response;\n    const text = response.text();\n\n    // Parse the response into structured data\n    const lines = text.split('\\n');\n    const data = {};\n    lines.forEach(line => {\n      if (line.includes(':')) {\n        const [key, value] = line.split(':').map(s => s.trim());\n        data[key.toLowerCase()] = value;\n      }\n    });\n\n    // Return structured data matching your app's format\n    return {\n      id: Date.now().toString(),\n      name: data.name || 'Unknown Item',\n      material: data.material || 'Unknown',\n      category: data.category || 'General Waste',\n      binColor: data.bincolor || 'Black',\n      tip: data.tip || 'Please dispose of properly'\n    };\n  } catch (error) {\n    console.error('Error analyzing image:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["GoogleGenerativeAI","process","env","REACT_APP_GEMINI_API_KEY","console","error","genAI","analyzeImage","imageData","model","getGenerativeModel","base64Data","split","binaryData","atob","bytes","Uint8Array","length","i","charCodeAt","imageParts","inlineData","data","mimeType","prompt","result","generateContent","response","text","lines","forEach","line","includes","key","value","map","s","trim","toLowerCase","id","Date","now","toString","name","material","category","binColor","bincolor","tip"],"sources":["C:/Users/patil/Desktop/fistbump2-main/src/services/geminiService.js"],"sourcesContent":["import { GoogleGenerativeAI } from \"@google/generative-ai\";\r\n\r\n// Make sure your .env file has the API key\r\nif (!process.env.REACT_APP_GEMINI_API_KEY) {\r\n  console.error('Missing Gemini API key! Please add REACT_APP_GEMINI_API_KEY to your .env file');\r\n}\r\n\r\nconst genAI = new GoogleGenerativeAI(process.env.REACT_APP_GEMINI_API_KEY || '');\r\n\r\nexport const analyzeImage = async (imageData) => {\r\n  try {\r\n    const model = genAI.getGenerativeModel({ model: \"gemini-2.5-flash\" });\r\n    \r\n    // Convert base64 to Uint8Array\r\n    const base64Data = imageData.split(',')[1];\r\n    const binaryData = atob(base64Data);\r\n    const bytes = new Uint8Array(binaryData.length);\r\n    for (let i = 0; i < binaryData.length; i++) {\r\n      bytes[i] = binaryData.charCodeAt(i);\r\n    }\r\n\r\n    const imageParts = [\r\n      {\r\n        inlineData: {\r\n          data: base64Data,\r\n          mimeType: \"image/jpeg\"\r\n        },\r\n      },\r\n    ];\r\n\r\n    const prompt = `Analyze this image and provide waste classification details in the following strict format:\r\n\r\n    Name: [name of the item]\r\n    Material: [Plastic/Glass/Paper/Metal/Organic/Hazardous]\r\n    Category: [type of waste]\r\n    BinColor: [Yellow/Blue/Green/Brown/Black/Red]\r\n    Tip: [disposal instructions]\r\n\r\n    Yellow bin is for plastic and metal\r\n    Blue bin is for paper and cardboard\r\n    Green bin is for glass\r\n    Brown bin is for organic waste\r\n    Black bin is for general waste\r\n    Red bin is for hazardous materials`;\r\n\r\n    const result = await model.generateContent([prompt, ...imageParts]);\r\n    const response = await result.response;\r\n    const text = response.text();\r\n\r\n    // Parse the response into structured data\r\n    const lines = text.split('\\n');\r\n    const data = {};\r\n    \r\n    lines.forEach(line => {\r\n      if (line.includes(':')) {\r\n        const [key, value] = line.split(':').map(s => s.trim());\r\n        data[key.toLowerCase()] = value;\r\n      }\r\n    });\r\n\r\n    // Return structured data matching your app's format\r\n    return {\r\n      id: Date.now().toString(),\r\n      name: data.name || 'Unknown Item',\r\n      material: data.material || 'Unknown',\r\n      category: data.category || 'General Waste',\r\n      binColor: data.bincolor || 'Black',\r\n      tip: data.tip || 'Please dispose of properly',\r\n    };\r\n  } catch (error) {\r\n    console.error('Error analyzing image:', error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,uBAAuB;;AAE1D;AACA,IAAI,CAACC,OAAO,CAACC,GAAG,CAACC,wBAAwB,EAAE;EACzCC,OAAO,CAACC,KAAK,CAAC,+EAA+E,CAAC;AAChG;AAEA,MAAMC,KAAK,GAAG,IAAIN,kBAAkB,CAACC,OAAO,CAACC,GAAG,CAACC,wBAAwB,IAAI,EAAE,CAAC;AAEhF,OAAO,MAAMI,YAAY,GAAG,MAAOC,SAAS,IAAK;EAC/C,IAAI;IACF,MAAMC,KAAK,GAAGH,KAAK,CAACI,kBAAkB,CAAC;MAAED,KAAK,EAAE;IAAmB,CAAC,CAAC;;IAErE;IACA,MAAME,UAAU,GAAGH,SAAS,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC1C,MAAMC,UAAU,GAAGC,IAAI,CAACH,UAAU,CAAC;IACnC,MAAMI,KAAK,GAAG,IAAIC,UAAU,CAACH,UAAU,CAACI,MAAM,CAAC;IAC/C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,UAAU,CAACI,MAAM,EAAEC,CAAC,EAAE,EAAE;MAC1CH,KAAK,CAACG,CAAC,CAAC,GAAGL,UAAU,CAACM,UAAU,CAACD,CAAC,CAAC;IACrC;IAEA,MAAME,UAAU,GAAG,CACjB;MACEC,UAAU,EAAE;QACVC,IAAI,EAAEX,UAAU;QAChBY,QAAQ,EAAE;MACZ;IACF,CAAC,CACF;IAED,MAAMC,MAAM,GAAG;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;IAEnC,MAAMC,MAAM,GAAG,MAAMhB,KAAK,CAACiB,eAAe,CAAC,CAACF,MAAM,EAAE,GAAGJ,UAAU,CAAC,CAAC;IACnE,MAAMO,QAAQ,GAAG,MAAMF,MAAM,CAACE,QAAQ;IACtC,MAAMC,IAAI,GAAGD,QAAQ,CAACC,IAAI,CAAC,CAAC;;IAE5B;IACA,MAAMC,KAAK,GAAGD,IAAI,CAAChB,KAAK,CAAC,IAAI,CAAC;IAC9B,MAAMU,IAAI,GAAG,CAAC,CAAC;IAEfO,KAAK,CAACC,OAAO,CAACC,IAAI,IAAI;MACpB,IAAIA,IAAI,CAACC,QAAQ,CAAC,GAAG,CAAC,EAAE;QACtB,MAAM,CAACC,GAAG,EAAEC,KAAK,CAAC,GAAGH,IAAI,CAACnB,KAAK,CAAC,GAAG,CAAC,CAACuB,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;QACvDf,IAAI,CAACW,GAAG,CAACK,WAAW,CAAC,CAAC,CAAC,GAAGJ,KAAK;MACjC;IACF,CAAC,CAAC;;IAEF;IACA,OAAO;MACLK,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;MACzBC,IAAI,EAAErB,IAAI,CAACqB,IAAI,IAAI,cAAc;MACjCC,QAAQ,EAAEtB,IAAI,CAACsB,QAAQ,IAAI,SAAS;MACpCC,QAAQ,EAAEvB,IAAI,CAACuB,QAAQ,IAAI,eAAe;MAC1CC,QAAQ,EAAExB,IAAI,CAACyB,QAAQ,IAAI,OAAO;MAClCC,GAAG,EAAE1B,IAAI,CAAC0B,GAAG,IAAI;IACnB,CAAC;EACH,CAAC,CAAC,OAAO3C,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}