{"ast":null,"code":"import { GoogleGenerativeAI } from \"@google/generative-ai\";\nif (!process.env.REACT_APP_GEMINI_API_KEY) {\n  console.error('Missing Gemini API key! Please add REACT_APP_GEMINI_API_KEY to your .env file');\n}\nconst genAI = new GoogleGenerativeAI(process.env.REACT_APP_GEMINI_API_KEY || '');\nexport const analyzeImage = async imageData => {\n  try {\n    const model = genAI.getGenerativeModel({\n      model: \"gemini-2.5-flash\"\n    });\n\n    // Validate image data format\n    if (!(imageData !== null && imageData !== void 0 && imageData.startsWith('data:image/'))) {\n      throw new Error('Invalid image format. Must be a valid data URL.');\n    }\n\n    // Clean up base64 data - remove header and clean whitespace\n    const base64Data = imageData.replace(/^data:image\\/[a-z]+;base64,/, '').trim();\n\n    // Validate base64 string\n    if (!isValidBase64(base64Data)) {\n      throw new Error('Invalid base64 data');\n    }\n    const imageParts = [{\n      inlineData: {\n        data: base64Data,\n        mimeType: \"image/jpeg\"\n      }\n    }];\n\n    // Ensure the model is ready before sending data\n    await new Promise(resolve => setTimeout(resolve, 100));\n    const result = await model.generateContent([{\n      text: \"Analyze this image and identify what type of waste item it is. Provide details about material, recyclability, and proper disposal method.\"\n    }, ...imageParts]);\n    const response = await result.response;\n    const text = response.text();\n\n    // Parse the response\n    const lines = text.split('\\n');\n    const data = {};\n    lines.forEach(line => {\n      if (line.includes(':')) {\n        const [key, value] = line.split(':').map(s => s.trim());\n        data[key.toLowerCase()] = value;\n      }\n    });\n    return {\n      id: Date.now().toString(),\n      name: data.name || 'Unknown Item',\n      material: data.material || 'Unknown',\n      category: data.category || 'General Waste',\n      binColor: data.bincolor || 'Black',\n      tip: data.tip || 'Please dispose of properly'\n    };\n  } catch (error) {\n    console.error('Error in analyzeImage:', error);\n    throw new Error(`Image analysis failed: ${error.message}`);\n  }\n};\n\n// Helper function to validate base64 string\nfunction isValidBase64(str) {\n  try {\n    // Check if the string contains valid base64 characters\n    if (!/^[A-Za-z0-9+/=]+$/.test(str)) return false;\n\n    // Check if length is valid (multiple of 4)\n    if (str.length % 4 !== 0) return false;\n\n    // Try decoding\n    return btoa(atob(str)) === str;\n  } catch (e) {\n    return false;\n  }\n}","map":{"version":3,"names":["GoogleGenerativeAI","process","env","REACT_APP_GEMINI_API_KEY","console","error","genAI","analyzeImage","imageData","model","getGenerativeModel","startsWith","Error","base64Data","replace","trim","isValidBase64","imageParts","inlineData","data","mimeType","Promise","resolve","setTimeout","result","generateContent","text","response","lines","split","forEach","line","includes","key","value","map","s","toLowerCase","id","Date","now","toString","name","material","category","binColor","bincolor","tip","message","str","test","length","btoa","atob","e"],"sources":["C:/Users/patil/Desktop/fistbump2-main/src/services/geminiService.js"],"sourcesContent":["import { GoogleGenerativeAI } from \"@google/generative-ai\";\r\n\r\nif (!process.env.REACT_APP_GEMINI_API_KEY) {\r\n  console.error('Missing Gemini API key! Please add REACT_APP_GEMINI_API_KEY to your .env file');\r\n}\r\n\r\nconst genAI = new GoogleGenerativeAI(process.env.REACT_APP_GEMINI_API_KEY || '');\r\n\r\nexport const analyzeImage = async (imageData) => {\r\n  try {\r\n    const model = genAI.getGenerativeModel({ model: \"gemini-2.5-flash\" });\r\n    \r\n    // Validate image data format\r\n    if (!imageData?.startsWith('data:image/')) {\r\n      throw new Error('Invalid image format. Must be a valid data URL.');\r\n    }\r\n\r\n    // Clean up base64 data - remove header and clean whitespace\r\n    const base64Data = imageData\r\n      .replace(/^data:image\\/[a-z]+;base64,/, '')\r\n      .trim();\r\n\r\n    // Validate base64 string\r\n    if (!isValidBase64(base64Data)) {\r\n      throw new Error('Invalid base64 data');\r\n    }\r\n\r\n    const imageParts = [\r\n      {\r\n        inlineData: {\r\n          data: base64Data,\r\n          mimeType: \"image/jpeg\"\r\n        },\r\n      },\r\n    ];\r\n\r\n    // Ensure the model is ready before sending data\r\n    await new Promise(resolve => setTimeout(resolve, 100));\r\n\r\n    const result = await model.generateContent([\r\n      {\r\n        text: \"Analyze this image and identify what type of waste item it is. Provide details about material, recyclability, and proper disposal method.\"\r\n      },\r\n      ...imageParts\r\n    ]);\r\n\r\n    const response = await result.response;\r\n    const text = response.text();\r\n\r\n    // Parse the response\r\n    const lines = text.split('\\n');\r\n    const data = {};\r\n    \r\n    lines.forEach(line => {\r\n      if (line.includes(':')) {\r\n        const [key, value] = line.split(':').map(s => s.trim());\r\n        data[key.toLowerCase()] = value;\r\n      }\r\n    });\r\n\r\n    return {\r\n      id: Date.now().toString(),\r\n      name: data.name || 'Unknown Item',\r\n      material: data.material || 'Unknown',\r\n      category: data.category || 'General Waste',\r\n      binColor: data.bincolor || 'Black',\r\n      tip: data.tip || 'Please dispose of properly',\r\n    };\r\n  } catch (error) {\r\n    console.error('Error in analyzeImage:', error);\r\n    throw new Error(`Image analysis failed: ${error.message}`);\r\n  }\r\n};\r\n\r\n// Helper function to validate base64 string\r\nfunction isValidBase64(str) {\r\n  try {\r\n    // Check if the string contains valid base64 characters\r\n    if (!/^[A-Za-z0-9+/=]+$/.test(str)) return false;\r\n    \r\n    // Check if length is valid (multiple of 4)\r\n    if (str.length % 4 !== 0) return false;\r\n    \r\n    // Try decoding\r\n    return btoa(atob(str)) === str;\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}