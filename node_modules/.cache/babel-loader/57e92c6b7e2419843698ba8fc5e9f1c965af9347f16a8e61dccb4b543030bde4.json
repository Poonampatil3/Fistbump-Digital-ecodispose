{"ast":null,"code":"import { GoogleGenerativeAI } from \"@google/generative-ai\";\nif (!process.env.REACT_APP_GEMINI_API_KEY) {\n  console.error('Missing Gemini API key! Please add REACT_APP_GEMINI_API_KEY to your .env file');\n}\nconst genAI = new GoogleGenerativeAI(process.env.REACT_APP_GEMINI_API_KEY || '');\nexport const analyzeImage = async imageData => {\n  try {\n    const model = genAI.getGenerativeModel({\n      model: \"gemini-2.5-flash\"\n    });\n\n    // Validate and process image data\n    let base64Data;\n    if (typeof imageData === 'string') {\n      // Handle base64 string from webcam\n      if (imageData.startsWith('data:image')) {\n        base64Data = imageData.split(',')[1];\n      } else {\n        throw new Error('Invalid image data format: Must be base64 or File/Blob');\n      }\n    } else if (imageData instanceof Blob || imageData instanceof File) {\n      // Handle File/Blob objects from file upload\n      base64Data = await new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => resolve(reader.result.split(',')[1]);\n        reader.onerror = reject;\n        reader.readAsDataURL(imageData);\n      });\n    } else {\n      throw new Error('Invalid image data format: Must be base64 or File/Blob');\n    }\n\n    // Generate content with image\n    const prompt = `Analyze this image and identify what type of waste item it is. Format the response as:\n    Name: [item name]\n    Material: [material type]\n    Category: [waste category]\n    BinColor: [bin color]\n    Tip: [disposal instructions]`;\n    const result = await model.generateContent([prompt, {\n      inlineData: {\n        data: base64Data,\n        mimeType: \"image/jpeg\"\n      }\n    }]);\n    const response = await result.response;\n    const text = response.text();\n\n    // Parse the response\n    const lines = text.split('\\n');\n    const data = {};\n    lines.forEach(line => {\n      if (line.includes(':')) {\n        const [key, value] = line.split(':').map(s => s.trim());\n        data[key.toLowerCase()] = value;\n      }\n    });\n    return {\n      id: Date.now().toString(),\n      name: data.name || 'Unknown Item',\n      material: data.material || 'Unknown',\n      category: data.category || 'General Waste',\n      binColor: data.bincolor || 'Black',\n      tip: data.tip || 'Please dispose of properly'\n    };\n  } catch (error) {\n    console.error('Error in analyzeImage:', error);\n    throw new Error(`Failed to analyze image: ${error.message}`);\n  }\n};","map":{"version":3,"names":["GoogleGenerativeAI","process","env","REACT_APP_GEMINI_API_KEY","console","error","genAI","analyzeImage","imageData","model","getGenerativeModel","base64Data","startsWith","split","Error","Blob","File","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsDataURL","prompt","generateContent","inlineData","data","mimeType","response","text","lines","forEach","line","includes","key","value","map","s","trim","toLowerCase","id","Date","now","toString","name","material","category","binColor","bincolor","tip","message"],"sources":["C:/Users/patil/Desktop/fistbump2-main/src/services/geminiService.js"],"sourcesContent":["import { GoogleGenerativeAI } from \"@google/generative-ai\";\r\n\r\nif (!process.env.REACT_APP_GEMINI_API_KEY) {\r\n  console.error('Missing Gemini API key! Please add REACT_APP_GEMINI_API_KEY to your .env file');\r\n}\r\n\r\nconst genAI = new GoogleGenerativeAI(process.env.REACT_APP_GEMINI_API_KEY || '');\r\n\r\nexport const analyzeImage = async (imageData) => {\r\n  try {\r\n    const model = genAI.getGenerativeModel({ model: \"gemini-2.5-flash\" });\r\n    \r\n    // Validate and process image data\r\n    let base64Data;\r\n    \r\n    if (typeof imageData === 'string') {\r\n      // Handle base64 string from webcam\r\n      if (imageData.startsWith('data:image')) {\r\n        base64Data = imageData.split(',')[1];\r\n      } else {\r\n        throw new Error('Invalid image data format: Must be base64 or File/Blob');\r\n      }\r\n    } else if (imageData instanceof Blob || imageData instanceof File) {\r\n      // Handle File/Blob objects from file upload\r\n      base64Data = await new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.onload = () => resolve(reader.result.split(',')[1]);\r\n        reader.onerror = reject;\r\n        reader.readAsDataURL(imageData);\r\n      });\r\n    } else {\r\n      throw new Error('Invalid image data format: Must be base64 or File/Blob');\r\n    }\r\n\r\n    // Generate content with image\r\n    const prompt = `Analyze this image and identify what type of waste item it is. Format the response as:\r\n    Name: [item name]\r\n    Material: [material type]\r\n    Category: [waste category]\r\n    BinColor: [bin color]\r\n    Tip: [disposal instructions]`;\r\n\r\n    const result = await model.generateContent([\r\n      prompt,\r\n      {\r\n        inlineData: {\r\n          data: base64Data,\r\n          mimeType: \"image/jpeg\"\r\n        }\r\n      }\r\n    ]);\r\n\r\n    const response = await result.response;\r\n    const text = response.text();\r\n\r\n    // Parse the response\r\n    const lines = text.split('\\n');\r\n    const data = {};\r\n    \r\n    lines.forEach(line => {\r\n      if (line.includes(':')) {\r\n        const [key, value] = line.split(':').map(s => s.trim());\r\n        data[key.toLowerCase()] = value;\r\n      }\r\n    });\r\n\r\n    return {\r\n      id: Date.now().toString(),\r\n      name: data.name || 'Unknown Item',\r\n      material: data.material || 'Unknown',\r\n      category: data.category || 'General Waste',\r\n      binColor: data.bincolor || 'Black',\r\n      tip: data.tip || 'Please dispose of properly',\r\n    };\r\n  } catch (error) {\r\n    console.error('Error in analyzeImage:', error);\r\n    throw new Error(`Failed to analyze image: ${error.message}`);\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}