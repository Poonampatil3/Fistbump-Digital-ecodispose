{"ast":null,"code":"import { GoogleGenerativeAI } from \"@google/generative-ai\";\n\n// Make sure your .env file has the API key\nif (!process.env.REACT_APP_GEMINI_API_KEY) {\n  console.error('Missing Gemini API key! Please add REACT_APP_GEMINI_API_KEY to your .env file');\n}\nconst genAI = new GoogleGenerativeAI(process.env.REACT_APP_GEMINI_API_KEY || '');\nexport const analyzeImage = async imageData => {\n  try {\n    // Use gemini-pro-vision instead of gemini-2.5-flash\n    const model = genAI.getGenerativeModel({\n      model: \"gemini-1.0-pro-vision\"\n    });\n\n    // Convert base64 to Uint8Array\n    const base64Data = imageData.split(',')[1];\n    const binaryData = atob(base64Data);\n    const bytes = new Uint8Array(binaryData.length);\n    for (let i = 0; i < binaryData.length; i++) {\n      bytes[i] = binaryData.charCodeAt(i);\n    }\n    const imageParts = [{\n      inlineData: {\n        data: base64Data,\n        mimeType: \"image/jpeg\"\n      }\n    }];\n    const prompt = \"Please analyze this image and identify what type of waste item it is. Provide details about its material type, recyclability, and proper disposal method. Format your response as: Name: [item name], Material: [material type], Category: [waste category], BinColor: [appropriate bin color], Tip: [disposal instructions]\";\n    const result = await model.generateContent([prompt, ...imageParts]);\n    const response = await result.response;\n    const text = response.text();\n\n    // Parse the structured response\n    const lines = text.split('\\n');\n    const parsedResponse = {};\n    lines.forEach(line => {\n      const [key, value] = line.split(':').map(str => str.trim());\n      if (key && value) {\n        parsedResponse[key.toLowerCase()] = value;\n      }\n    });\n    return {\n      name: parsedResponse.name || \"Unknown Item\",\n      material: parsedResponse.material || \"Other\",\n      category: parsedResponse.category || \"General Waste\",\n      binColor: parsedResponse.bincolor || \"Black\",\n      tip: parsedResponse.tip || text\n    };\n  } catch (error) {\n    console.error('Error analyzing image:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["GoogleGenerativeAI","process","env","REACT_APP_GEMINI_API_KEY","console","error","genAI","analyzeImage","imageData","model","getGenerativeModel","base64Data","split","binaryData","atob","bytes","Uint8Array","length","i","charCodeAt","imageParts","inlineData","data","mimeType","prompt","result","generateContent","response","text","lines","parsedResponse","forEach","line","key","value","map","str","trim","toLowerCase","name","material","category","binColor","bincolor","tip"],"sources":["C:/Users/patil/Desktop/fistbump2-main/src/services/geminiService.js"],"sourcesContent":["import { GoogleGenerativeAI } from \"@google/generative-ai\";\r\n\r\n// Make sure your .env file has the API key\r\nif (!process.env.REACT_APP_GEMINI_API_KEY) {\r\n  console.error('Missing Gemini API key! Please add REACT_APP_GEMINI_API_KEY to your .env file');\r\n}\r\n\r\nconst genAI = new GoogleGenerativeAI(process.env.REACT_APP_GEMINI_API_KEY || '');\r\n\r\nexport const analyzeImage = async (imageData) => {\r\n  try {\r\n    // Use gemini-pro-vision instead of gemini-2.5-flash\r\n    const model = genAI.getGenerativeModel({ model: \"gemini-1.0-pro-vision\" });\r\n    \r\n    // Convert base64 to Uint8Array\r\n    const base64Data = imageData.split(',')[1];\r\n    const binaryData = atob(base64Data);\r\n    const bytes = new Uint8Array(binaryData.length);\r\n    for (let i = 0; i < binaryData.length; i++) {\r\n      bytes[i] = binaryData.charCodeAt(i);\r\n    }\r\n\r\n    const imageParts = [\r\n      {\r\n        inlineData: {\r\n          data: base64Data,\r\n          mimeType: \"image/jpeg\"\r\n        },\r\n      },\r\n    ];\r\n\r\n    const prompt = \"Please analyze this image and identify what type of waste item it is. Provide details about its material type, recyclability, and proper disposal method. Format your response as: Name: [item name], Material: [material type], Category: [waste category], BinColor: [appropriate bin color], Tip: [disposal instructions]\";\r\n\r\n    const result = await model.generateContent([prompt, ...imageParts]);\r\n    const response = await result.response;\r\n    const text = response.text();\r\n\r\n    // Parse the structured response\r\n    const lines = text.split('\\n');\r\n    const parsedResponse = {};\r\n    \r\n    lines.forEach(line => {\r\n      const [key, value] = line.split(':').map(str => str.trim());\r\n      if (key && value) {\r\n        parsedResponse[key.toLowerCase()] = value;\r\n      }\r\n    });\r\n\r\n    return {\r\n      name: parsedResponse.name || \"Unknown Item\",\r\n      material: parsedResponse.material || \"Other\",\r\n      category: parsedResponse.category || \"General Waste\",\r\n      binColor: parsedResponse.bincolor || \"Black\",\r\n      tip: parsedResponse.tip || text\r\n    };\r\n  } catch (error) {\r\n    console.error('Error analyzing image:', error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,uBAAuB;;AAE1D;AACA,IAAI,CAACC,OAAO,CAACC,GAAG,CAACC,wBAAwB,EAAE;EACzCC,OAAO,CAACC,KAAK,CAAC,+EAA+E,CAAC;AAChG;AAEA,MAAMC,KAAK,GAAG,IAAIN,kBAAkB,CAACC,OAAO,CAACC,GAAG,CAACC,wBAAwB,IAAI,EAAE,CAAC;AAEhF,OAAO,MAAMI,YAAY,GAAG,MAAOC,SAAS,IAAK;EAC/C,IAAI;IACF;IACA,MAAMC,KAAK,GAAGH,KAAK,CAACI,kBAAkB,CAAC;MAAED,KAAK,EAAE;IAAwB,CAAC,CAAC;;IAE1E;IACA,MAAME,UAAU,GAAGH,SAAS,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC1C,MAAMC,UAAU,GAAGC,IAAI,CAACH,UAAU,CAAC;IACnC,MAAMI,KAAK,GAAG,IAAIC,UAAU,CAACH,UAAU,CAACI,MAAM,CAAC;IAC/C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,UAAU,CAACI,MAAM,EAAEC,CAAC,EAAE,EAAE;MAC1CH,KAAK,CAACG,CAAC,CAAC,GAAGL,UAAU,CAACM,UAAU,CAACD,CAAC,CAAC;IACrC;IAEA,MAAME,UAAU,GAAG,CACjB;MACEC,UAAU,EAAE;QACVC,IAAI,EAAEX,UAAU;QAChBY,QAAQ,EAAE;MACZ;IACF,CAAC,CACF;IAED,MAAMC,MAAM,GAAG,8TAA8T;IAE7U,MAAMC,MAAM,GAAG,MAAMhB,KAAK,CAACiB,eAAe,CAAC,CAACF,MAAM,EAAE,GAAGJ,UAAU,CAAC,CAAC;IACnE,MAAMO,QAAQ,GAAG,MAAMF,MAAM,CAACE,QAAQ;IACtC,MAAMC,IAAI,GAAGD,QAAQ,CAACC,IAAI,CAAC,CAAC;;IAE5B;IACA,MAAMC,KAAK,GAAGD,IAAI,CAAChB,KAAK,CAAC,IAAI,CAAC;IAC9B,MAAMkB,cAAc,GAAG,CAAC,CAAC;IAEzBD,KAAK,CAACE,OAAO,CAACC,IAAI,IAAI;MACpB,MAAM,CAACC,GAAG,EAAEC,KAAK,CAAC,GAAGF,IAAI,CAACpB,KAAK,CAAC,GAAG,CAAC,CAACuB,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;MAC3D,IAAIJ,GAAG,IAAIC,KAAK,EAAE;QAChBJ,cAAc,CAACG,GAAG,CAACK,WAAW,CAAC,CAAC,CAAC,GAAGJ,KAAK;MAC3C;IACF,CAAC,CAAC;IAEF,OAAO;MACLK,IAAI,EAAET,cAAc,CAACS,IAAI,IAAI,cAAc;MAC3CC,QAAQ,EAAEV,cAAc,CAACU,QAAQ,IAAI,OAAO;MAC5CC,QAAQ,EAAEX,cAAc,CAACW,QAAQ,IAAI,eAAe;MACpDC,QAAQ,EAAEZ,cAAc,CAACa,QAAQ,IAAI,OAAO;MAC5CC,GAAG,EAAEd,cAAc,CAACc,GAAG,IAAIhB;IAC7B,CAAC;EACH,CAAC,CAAC,OAAOvB,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}