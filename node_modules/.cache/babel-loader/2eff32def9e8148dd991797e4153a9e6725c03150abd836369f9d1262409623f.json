{"ast":null,"code":"import { GoogleGenerativeAI } from \"@google/generative-ai\";\nconst genAI = new GoogleGenerativeAI(process.env.REACT_APP_GEMINI_API_KEY);\nexport const analyzeImage = async imageData => {\n  try {\n    const model = genAI.getGenerativeModel({\n      model: \"gemini-pro-vision\"\n    });\n\n    // Convert base64 to Uint8Array\n    const base64Data = imageData.split(',')[1];\n    const binaryData = atob(base64Data);\n    const bytes = new Uint8Array(binaryData.length);\n    for (let i = 0; i < binaryData.length; i++) {\n      bytes[i] = binaryData.charCodeAt(i);\n    }\n    const imageParts = [{\n      inlineData: {\n        data: base64Data,\n        mimeType: \"image/jpeg\"\n      }\n    }];\n    const prompt = \"Please analyze this image and identify what type of waste item it is. Provide details about its material type, recyclability, and proper disposal method.\";\n    const result = await model.generateContent([prompt, ...imageParts]);\n    const response = await result.response;\n    const text = response.text();\n\n    // Parse the response to match our data structure\n    // This is a simple example - you may need to adjust based on actual responses\n    return {\n      name: text.split('\\n')[0],\n      material: text.includes('plastic') ? 'Plastic' : text.includes('glass') ? 'Glass' : text.includes('paper') ? 'Paper' : 'Other',\n      category: text.includes('recyclable') ? 'Recyclables' : 'General Waste',\n      binColor: text.includes('recyclable') ? 'Blue' : 'Black',\n      tip: text.split('\\n').slice(1).join(' ')\n    };\n  } catch (error) {\n    console.error('Error analyzing image:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["GoogleGenerativeAI","genAI","process","env","REACT_APP_GEMINI_API_KEY","analyzeImage","imageData","model","getGenerativeModel","base64Data","split","binaryData","atob","bytes","Uint8Array","length","i","charCodeAt","imageParts","inlineData","data","mimeType","prompt","result","generateContent","response","text","name","material","includes","category","binColor","tip","slice","join","error","console"],"sources":["C:/Users/patil/Desktop/fistbump2-main/src/services/geminiService.js"],"sourcesContent":["import { GoogleGenerativeAI } from \"@google/generative-ai\";\r\n\r\nconst genAI = new GoogleGenerativeAI(process.env.REACT_APP_GEMINI_API_KEY);\r\n\r\nexport const analyzeImage = async (imageData) => {\r\n  try {\r\n    const model = genAI.getGenerativeModel({ model: \"gemini-pro-vision\" });\r\n    \r\n    // Convert base64 to Uint8Array\r\n    const base64Data = imageData.split(',')[1];\r\n    const binaryData = atob(base64Data);\r\n    const bytes = new Uint8Array(binaryData.length);\r\n    for (let i = 0; i < binaryData.length; i++) {\r\n      bytes[i] = binaryData.charCodeAt(i);\r\n    }\r\n\r\n    const imageParts = [\r\n      {\r\n        inlineData: {\r\n          data: base64Data,\r\n          mimeType: \"image/jpeg\"\r\n        },\r\n      },\r\n    ];\r\n\r\n    const prompt = \"Please analyze this image and identify what type of waste item it is. Provide details about its material type, recyclability, and proper disposal method.\";\r\n\r\n    const result = await model.generateContent([prompt, ...imageParts]);\r\n    const response = await result.response;\r\n    const text = response.text();\r\n\r\n    // Parse the response to match our data structure\r\n    // This is a simple example - you may need to adjust based on actual responses\r\n    return {\r\n      name: text.split('\\n')[0],\r\n      material: text.includes('plastic') ? 'Plastic' : \r\n                text.includes('glass') ? 'Glass' : \r\n                text.includes('paper') ? 'Paper' : 'Other',\r\n      category: text.includes('recyclable') ? 'Recyclables' : 'General Waste',\r\n      binColor: text.includes('recyclable') ? 'Blue' : 'Black',\r\n      tip: text.split('\\n').slice(1).join(' '),\r\n    };\r\n  } catch (error) {\r\n    console.error('Error analyzing image:', error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,uBAAuB;AAE1D,MAAMC,KAAK,GAAG,IAAID,kBAAkB,CAACE,OAAO,CAACC,GAAG,CAACC,wBAAwB,CAAC;AAE1E,OAAO,MAAMC,YAAY,GAAG,MAAOC,SAAS,IAAK;EAC/C,IAAI;IACF,MAAMC,KAAK,GAAGN,KAAK,CAACO,kBAAkB,CAAC;MAAED,KAAK,EAAE;IAAoB,CAAC,CAAC;;IAEtE;IACA,MAAME,UAAU,GAAGH,SAAS,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC1C,MAAMC,UAAU,GAAGC,IAAI,CAACH,UAAU,CAAC;IACnC,MAAMI,KAAK,GAAG,IAAIC,UAAU,CAACH,UAAU,CAACI,MAAM,CAAC;IAC/C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,UAAU,CAACI,MAAM,EAAEC,CAAC,EAAE,EAAE;MAC1CH,KAAK,CAACG,CAAC,CAAC,GAAGL,UAAU,CAACM,UAAU,CAACD,CAAC,CAAC;IACrC;IAEA,MAAME,UAAU,GAAG,CACjB;MACEC,UAAU,EAAE;QACVC,IAAI,EAAEX,UAAU;QAChBY,QAAQ,EAAE;MACZ;IACF,CAAC,CACF;IAED,MAAMC,MAAM,GAAG,2JAA2J;IAE1K,MAAMC,MAAM,GAAG,MAAMhB,KAAK,CAACiB,eAAe,CAAC,CAACF,MAAM,EAAE,GAAGJ,UAAU,CAAC,CAAC;IACnE,MAAMO,QAAQ,GAAG,MAAMF,MAAM,CAACE,QAAQ;IACtC,MAAMC,IAAI,GAAGD,QAAQ,CAACC,IAAI,CAAC,CAAC;;IAE5B;IACA;IACA,OAAO;MACLC,IAAI,EAAED,IAAI,CAAChB,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;MACzBkB,QAAQ,EAAEF,IAAI,CAACG,QAAQ,CAAC,SAAS,CAAC,GAAG,SAAS,GACpCH,IAAI,CAACG,QAAQ,CAAC,OAAO,CAAC,GAAG,OAAO,GAChCH,IAAI,CAACG,QAAQ,CAAC,OAAO,CAAC,GAAG,OAAO,GAAG,OAAO;MACpDC,QAAQ,EAAEJ,IAAI,CAACG,QAAQ,CAAC,YAAY,CAAC,GAAG,aAAa,GAAG,eAAe;MACvEE,QAAQ,EAAEL,IAAI,CAACG,QAAQ,CAAC,YAAY,CAAC,GAAG,MAAM,GAAG,OAAO;MACxDG,GAAG,EAAEN,IAAI,CAAChB,KAAK,CAAC,IAAI,CAAC,CAACuB,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG;IACzC,CAAC;EACH,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}