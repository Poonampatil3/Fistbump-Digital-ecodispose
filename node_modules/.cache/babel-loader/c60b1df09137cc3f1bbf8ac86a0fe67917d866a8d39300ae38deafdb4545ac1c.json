{"ast":null,"code":"import { GoogleGenerativeAI } from \"@google/generative-ai\";\nif (!process.env.REACT_APP_GEMINI_API_KEY) {\n  console.error('Missing Gemini API key! Please add REACT_APP_GEMINI_API_KEY to your .env file');\n}\nconst genAI = new GoogleGenerativeAI(process.env.REACT_APP_GEMINI_API_KEY || '');\nexport const analyzeImage = async imageData => {\n  try {\n    const model = genAI.getGenerativeModel({\n      model: \"gemini-2.5-flash\"\n    });\n\n    // Ensure we have valid base64 data\n    if (!imageData || typeof imageData !== 'string') {\n      throw new Error('Invalid image data format: Must be a base64 string');\n    }\n\n    // Extract base64 data from data URL\n    const base64regex = /^data:image\\/(jpeg|jpg|png);base64,\\/?/;\n    if (!base64regex.test(imageData)) {\n      throw new Error('Invalid image format: Must be a valid data URL');\n    }\n    const base64Data = imageData.replace(base64regex, '');\n    const prompt = `Analyze this image and identify what type of waste item it is. Format the response as:\n    Name: [item name]\n    Material: [material type]\n    Category: [waste category]\n    BinColor: [bin color]\n    Tip: [disposal instructions]\n\n    Yellow bin is for plastic and metal\n    Blue bin is for paper and cardboard\n    Green bin is for glass\n    Brown bin is for organic waste\n    Black bin is for general waste\n    Red bin is for hazardous materials`;\n    const result = await model.generateContent([prompt, {\n      inlineData: {\n        data: base64Data,\n        mimeType: \"image/jpeg\"\n      }\n    }]);\n    const response = await result.response;\n    const text = response.text();\n\n    // Parse the response\n    const lines = text.split('\\n');\n    const data = {};\n    lines.forEach(line => {\n      if (line.includes(':')) {\n        const [key, value] = line.split(':').map(s => s.trim());\n        data[key.toLowerCase()] = value;\n      }\n    });\n    return {\n      id: Date.now().toString(),\n      name: data.name || 'Unknown Item',\n      material: data.material || 'Unknown',\n      category: data.category || 'General Waste',\n      binColor: data.bincolor || 'Black',\n      tip: data.tip || 'Please dispose of properly'\n    };\n  } catch (error) {\n    console.error('Error in analyzeImage:', error);\n    throw new Error(`Failed to analyze image: ${error.message}`);\n  }\n};","map":{"version":3,"names":["GoogleGenerativeAI","process","env","REACT_APP_GEMINI_API_KEY","console","error","genAI","analyzeImage","imageData","model","getGenerativeModel","Error","base64regex","test","base64Data","replace","prompt","result","generateContent","inlineData","data","mimeType","response","text","lines","split","forEach","line","includes","key","value","map","s","trim","toLowerCase","id","Date","now","toString","name","material","category","binColor","bincolor","tip","message"],"sources":["C:/Users/patil/Desktop/fistbump2-main/src/services/geminiService.js"],"sourcesContent":["import { GoogleGenerativeAI } from \"@google/generative-ai\";\r\n\r\nif (!process.env.REACT_APP_GEMINI_API_KEY) {\r\n  console.error('Missing Gemini API key! Please add REACT_APP_GEMINI_API_KEY to your .env file');\r\n}\r\n\r\nconst genAI = new GoogleGenerativeAI(process.env.REACT_APP_GEMINI_API_KEY || '');\r\n\r\nexport const analyzeImage = async (imageData) => {\r\n  try {\r\n    const model = genAI.getGenerativeModel({ model: \"gemini-2.5-flash\" });\r\n    \r\n    // Ensure we have valid base64 data\r\n    if (!imageData || typeof imageData !== 'string') {\r\n      throw new Error('Invalid image data format: Must be a base64 string');\r\n    }\r\n\r\n    // Extract base64 data from data URL\r\n    const base64regex = /^data:image\\/(jpeg|jpg|png);base64,\\/?/;\r\n    if (!base64regex.test(imageData)) {\r\n      throw new Error('Invalid image format: Must be a valid data URL');\r\n    }\r\n\r\n    const base64Data = imageData.replace(base64regex, '');\r\n\r\n    const prompt = `Analyze this image and identify what type of waste item it is. Format the response as:\r\n    Name: [item name]\r\n    Material: [material type]\r\n    Category: [waste category]\r\n    BinColor: [bin color]\r\n    Tip: [disposal instructions]\r\n\r\n    Yellow bin is for plastic and metal\r\n    Blue bin is for paper and cardboard\r\n    Green bin is for glass\r\n    Brown bin is for organic waste\r\n    Black bin is for general waste\r\n    Red bin is for hazardous materials`;\r\n\r\n    const result = await model.generateContent([\r\n      prompt,\r\n      {\r\n        inlineData: {\r\n          data: base64Data,\r\n          mimeType: \"image/jpeg\"\r\n        }\r\n      }\r\n    ]);\r\n\r\n    const response = await result.response;\r\n    const text = response.text();\r\n\r\n    // Parse the response\r\n    const lines = text.split('\\n');\r\n    const data = {};\r\n    \r\n    lines.forEach(line => {\r\n      if (line.includes(':')) {\r\n        const [key, value] = line.split(':').map(s => s.trim());\r\n        data[key.toLowerCase()] = value;\r\n      }\r\n    });\r\n\r\n    return {\r\n      id: Date.now().toString(),\r\n      name: data.name || 'Unknown Item',\r\n      material: data.material || 'Unknown',\r\n      category: data.category || 'General Waste',\r\n      binColor: data.bincolor || 'Black',\r\n      tip: data.tip || 'Please dispose of properly',\r\n    };\r\n  } catch (error) {\r\n    console.error('Error in analyzeImage:', error);\r\n    throw new Error(`Failed to analyze image: ${error.message}`);\r\n  }\r\n};\r\n"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,uBAAuB;AAE1D,IAAI,CAACC,OAAO,CAACC,GAAG,CAACC,wBAAwB,EAAE;EACzCC,OAAO,CAACC,KAAK,CAAC,+EAA+E,CAAC;AAChG;AAEA,MAAMC,KAAK,GAAG,IAAIN,kBAAkB,CAACC,OAAO,CAACC,GAAG,CAACC,wBAAwB,IAAI,EAAE,CAAC;AAEhF,OAAO,MAAMI,YAAY,GAAG,MAAOC,SAAS,IAAK;EAC/C,IAAI;IACF,MAAMC,KAAK,GAAGH,KAAK,CAACI,kBAAkB,CAAC;MAAED,KAAK,EAAE;IAAmB,CAAC,CAAC;;IAErE;IACA,IAAI,CAACD,SAAS,IAAI,OAAOA,SAAS,KAAK,QAAQ,EAAE;MAC/C,MAAM,IAAIG,KAAK,CAAC,oDAAoD,CAAC;IACvE;;IAEA;IACA,MAAMC,WAAW,GAAG,wCAAwC;IAC5D,IAAI,CAACA,WAAW,CAACC,IAAI,CAACL,SAAS,CAAC,EAAE;MAChC,MAAM,IAAIG,KAAK,CAAC,gDAAgD,CAAC;IACnE;IAEA,MAAMG,UAAU,GAAGN,SAAS,CAACO,OAAO,CAACH,WAAW,EAAE,EAAE,CAAC;IAErD,MAAMI,MAAM,GAAG;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;IAEnC,MAAMC,MAAM,GAAG,MAAMR,KAAK,CAACS,eAAe,CAAC,CACzCF,MAAM,EACN;MACEG,UAAU,EAAE;QACVC,IAAI,EAAEN,UAAU;QAChBO,QAAQ,EAAE;MACZ;IACF,CAAC,CACF,CAAC;IAEF,MAAMC,QAAQ,GAAG,MAAML,MAAM,CAACK,QAAQ;IACtC,MAAMC,IAAI,GAAGD,QAAQ,CAACC,IAAI,CAAC,CAAC;;IAE5B;IACA,MAAMC,KAAK,GAAGD,IAAI,CAACE,KAAK,CAAC,IAAI,CAAC;IAC9B,MAAML,IAAI,GAAG,CAAC,CAAC;IAEfI,KAAK,CAACE,OAAO,CAACC,IAAI,IAAI;MACpB,IAAIA,IAAI,CAACC,QAAQ,CAAC,GAAG,CAAC,EAAE;QACtB,MAAM,CAACC,GAAG,EAAEC,KAAK,CAAC,GAAGH,IAAI,CAACF,KAAK,CAAC,GAAG,CAAC,CAACM,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;QACvDb,IAAI,CAACS,GAAG,CAACK,WAAW,CAAC,CAAC,CAAC,GAAGJ,KAAK;MACjC;IACF,CAAC,CAAC;IAEF,OAAO;MACLK,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;MACzBC,IAAI,EAAEnB,IAAI,CAACmB,IAAI,IAAI,cAAc;MACjCC,QAAQ,EAAEpB,IAAI,CAACoB,QAAQ,IAAI,SAAS;MACpCC,QAAQ,EAAErB,IAAI,CAACqB,QAAQ,IAAI,eAAe;MAC1CC,QAAQ,EAAEtB,IAAI,CAACuB,QAAQ,IAAI,OAAO;MAClCC,GAAG,EAAExB,IAAI,CAACwB,GAAG,IAAI;IACnB,CAAC;EACH,CAAC,CAAC,OAAOvC,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAM,IAAIM,KAAK,CAAC,4BAA4BN,KAAK,CAACwC,OAAO,EAAE,CAAC;EAC9D;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}